{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48],"program":"/Users/pmirabel/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","clap","/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=11cd61ac0914bca5","-C","extra-filename=-11cd61ac0914bca5","--out-dir","/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps","-L","dependency=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps","--extern","bitflags=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps/libbitflags-757f26c74db6f22a.rmeta","--extern","textwrap=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps/libtextwrap-8b52d4ea43ee1352.rmeta","--extern","unicode_width=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps/libunicode_width-1287814ce11fb05f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/pmirabel/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,119,111,114,107,115,112,97,99,101,95,114,115,47,100,111,109,111,116,105,99,95,101,110,111,99,101,97,110,95,99,117,116,105,105,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,99,108,97,112,45,49,49,99,100,54,49,97,99,48,57,49,52,98,99,97,53,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"clap","disambiguator":[17988884049871537620,17215295174024679666]},"crate_root":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src","external_crates":[{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6790510186242851874,16398378059199614345]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16952996814485381154,12694838226815725242]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10811575515166729188,5157104844567250356]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5499605051296296794,10602893664251808532]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[7615427394098920200,5473872719210042510]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10041795312384764197,6753572738911577197]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16531696748233657088,18425851410521139411]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[11028702079408304855,7762430400770749226]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[12306496864576505476,14030669852036366021]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":10,"id":{"name":"bitflags","disambiguator":[11709618735361748087,1723607089690121147]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":11,"id":{"name":"textwrap","disambiguator":[15618760579735728398,15290211001187482448]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","num":12,"id":{"name":"unicode_width","disambiguator":[2229277278190898867,2713329982102243129]}}],"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":354,"byte_end":24284,"line_start":6,"line_end":625,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3218},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22093,"byte_end":22096,"line_start":550,"line_end":550,"column_start":16,"column_end":19},"alias_span":null,"name":"Arg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3336},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22098,"byte_end":22106,"line_start":550,"line_end":550,"column_start":21,"column_end":29},"alias_span":null,"name":"ArgGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3228},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22108,"byte_end":22118,"line_start":550,"line_end":550,"column_start":31,"column_end":41},"alias_span":null,"name":"ArgMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3708},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22120,"byte_end":22131,"line_start":550,"line_end":550,"column_start":43,"column_end":54},"alias_span":null,"name":"ArgSettings","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3244},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22133,"byte_end":22141,"line_start":550,"line_end":550,"column_start":56,"column_end":64},"alias_span":null,"name":"OsValues","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3256},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22143,"byte_end":22153,"line_start":550,"line_end":550,"column_start":66,"column_end":76},"alias_span":null,"name":"SubCommand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3238},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22155,"byte_end":22161,"line_start":550,"line_end":550,"column_start":78,"column_end":84},"alias_span":null,"name":"Values","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":752},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22178,"byte_end":22181,"line_start":551,"line_end":551,"column_start":15,"column_end":18},"alias_span":null,"name":"App","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3140},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22183,"byte_end":22194,"line_start":551,"line_end":551,"column_start":20,"column_end":31},"alias_span":null,"name":"AppSettings","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3756},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22210,"byte_end":22216,"line_start":552,"line_end":552,"column_start":14,"column_end":20},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3778},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22235,"byte_end":22240,"line_start":553,"line_end":553,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3762},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22242,"byte_end":22251,"line_start":553,"line_end":553,"column_start":25,"column_end":34},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2178},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22253,"byte_end":22259,"line_start":553,"line_end":553,"column_start":36,"column_end":42},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3800},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22283,"byte_end":22288,"line_start":554,"line_end":554,"column_start":22,"column_end":27},"alias_span":null,"name":"Shell","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":354,"byte_end":24284,"line_start":6,"line_end":625,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.32.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":28},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":118},{"krate":0,"index":928},{"krate":0,"index":2054},{"krate":0,"index":2094},{"krate":0,"index":2134},{"krate":0,"index":2146},{"krate":0,"index":2240},{"krate":0,"index":2280},{"krate":0,"index":2290},{"krate":0,"index":2494},{"krate":0,"index":2554},{"krate":0,"index":2556}],"decl_id":null,"docs":" `clap` is a simple-to-use, efficient, and full-featured library for parsing command line\n arguments and subcommands when writing console/terminal applications.","sig":null,"attributes":[{"value":"crate_type = \"lib\"","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20722,"byte_end":20744,"line_start":515,"line_end":515,"column_start":1,"column_end":23}},{"value":"deny(missing_docs,\n       missing_debug_implementations,\n       missing_copy_implementations,\n       trivial_casts,\n       unused_import_braces,\n       unused_allocation)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20800,"byte_end":20947,"line_start":517,"line_end":518,"column_start":1,"column_end":50}},{"value":"forbid(unstable_features)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21185,"byte_end":21210,"line_start":522,"line_end":522,"column_start":63,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":3116},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134408,"byte_end":134416,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"AppFlags","qualname":"::app::settings::AppFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134397,"byte_end":134424,"line_start":55,"line_end":55,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134828,"byte_end":134831,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<AppFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134877,"byte_end":134883,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"zeroed","qualname":"<AppFlags>::zeroed","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":139166,"byte_end":139182,"line_start":168,"line_end":168,"column_start":5,"column_end":21},"name":"AllowInvalidUtf8","qualname":"::app::settings::AppSettings::AllowInvalidUtf8","value":"AppSettings::AllowInvalidUtf8","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that any invalid UTF-8 code points should *not* be treated as an error.\n This is the default behavior of `clap`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1237},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":139541,"byte_end":139560,"line_start":175,"line_end":175,"column_start":5,"column_end":24},"name":"AllArgsOverrideSelf","qualname":"::app::settings::AppSettings::AllArgsOverrideSelf","value":"AppSettings::AllArgsOverrideSelf","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":140609,"byte_end":140627,"line_start":200,"line_end":200,"column_start":5,"column_end":23},"name":"AllowLeadingHyphen","qualname":"::app::settings::AppSettings::AllowLeadingHyphen","value":"AppSettings::AllowLeadingHyphen","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that leading hyphens are allowed in argument *values*, such as negative numbers\n like `-10`. (which would otherwise be parsed as another flag or option)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1241},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":141390,"byte_end":141410,"line_start":222,"line_end":222,"column_start":5,"column_end":25},"name":"AllowNegativeNumbers","qualname":"::app::settings::AppSettings::AllowNegativeNumbers","value":"AppSettings::AllowNegativeNumbers","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Allows negative numbers to pass as values. This is similar to\n `AllowLeadingHyphen` except that it only allows numbers, all\n other undefined leading hyphens will fail to parse.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":145805,"byte_end":145827,"line_start":329,"line_end":329,"column_start":5,"column_end":27},"name":"AllowMissingPositional","qualname":"::app::settings::AppSettings::AllowMissingPositional","value":"AppSettings::AllowMissingPositional","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Allows one to implement two styles of CLIs where positionals can be used out of order.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1245},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":147412,"byte_end":147436,"line_start":365,"line_end":365,"column_start":5,"column_end":29},"name":"AllowExternalSubcommands","qualname":"::app::settings::AppSettings::AllowExternalSubcommands","value":"AppSettings::AllowExternalSubcommands","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that an unexpected positional argument,\n which would otherwise cause a [`ErrorKind::UnknownArgument`] error,\n should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":148272,"byte_end":148293,"line_start":387,"line_end":387,"column_start":5,"column_end":26},"name":"ArgsNegateSubcommands","qualname":"::app::settings::AppSettings::ArgsNegateSubcommands","value":"AppSettings::ArgsNegateSubcommands","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that use of a valid [argument] negates [subcommands] being used after. By default\n `clap` allows arguments between subcommands such as\n `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that\n functionality and says that arguments can only follow the *final* subcommand. For instance\n using this setting makes only the following invocations possible:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1249},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":149004,"byte_end":149023,"line_start":407,"line_end":407,"column_start":5,"column_end":24},"name":"ArgRequiredElseHelp","qualname":"::app::settings::AppSettings::ArgRequiredElseHelp","value":"AppSettings::ArgRequiredElseHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that the help text should be displayed (and then exit gracefully),\n if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":149499,"byte_end":149510,"line_start":425,"line_end":425,"column_start":5,"column_end":16},"name":"ColoredHelp","qualname":"::app::settings::AppSettings::ColoredHelp","value":"AppSettings::ColoredHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Uses colorized help messages.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":150097,"byte_end":150106,"line_start":445,"line_end":445,"column_start":5,"column_end":14},"name":"ColorAuto","qualname":"::app::settings::AppSettings::ColorAuto","value":"AppSettings::ColorAuto","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Enables colored output only when the output is going to a terminal or TTY.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":150645,"byte_end":150656,"line_start":463,"line_end":463,"column_start":5,"column_end":16},"name":"ColorAlways","qualname":"::app::settings::AppSettings::ColorAlways","value":"AppSettings::ColorAlways","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Enables colored output regardless of whether or not the output is going to a terminal/TTY.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":151185,"byte_end":151195,"line_start":481,"line_end":481,"column_start":5,"column_end":15},"name":"ColorNever","qualname":"::app::settings::AppSettings::ColorNever","value":"AppSettings::ColorNever","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Disables colored output no matter if the output is going to a terminal/TTY, or not.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":151537,"byte_end":151560,"line_start":493,"line_end":493,"column_start":5,"column_end":28},"name":"DontCollapseArgsInUsage","qualname":"::app::settings::AppSettings::DontCollapseArgsInUsage","value":"AppSettings::DontCollapseArgsInUsage","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1261},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":152319,"byte_end":152344,"line_start":512,"line_end":512,"column_start":5,"column_end":30},"name":"DontDelimitTrailingValues","qualname":"::app::settings::AppSettings::DontDelimitTrailingValues","value":"AppSettings::DontDelimitTrailingValues","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`]\n was used.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1263},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":153062,"byte_end":153083,"line_start":533,"line_end":533,"column_start":5,"column_end":26},"name":"DisableHelpSubcommand","qualname":"::app::settings::AppSettings::DisableHelpSubcommand","value":"AppSettings::DisableHelpSubcommand","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Disables the `help` subcommand","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":154189,"byte_end":154203,"line_start":565,"line_end":565,"column_start":5,"column_end":19},"name":"DisableVersion","qualname":"::app::settings::AppSettings::DisableVersion","value":"AppSettings::DisableVersion","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s\n (Defaults to `false`; application *does* have a version flag)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":154655,"byte_end":154673,"line_start":579,"line_end":579,"column_start":5,"column_end":23},"name":"DeriveDisplayOrder","qualname":"::app::settings::AppSettings::DeriveDisplayOrder","value":"AppSettings::DeriveDisplayOrder","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Displays the arguments and [`SubCommand`]s in the help message in the order that they were\n declared in, and not alphabetically which is the default.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":155459,"byte_end":155472,"line_start":600,"line_end":600,"column_start":5,"column_end":18},"name":"GlobalVersion","qualname":"::app::settings::AppSettings::GlobalVersion","value":"AppSettings::GlobalVersion","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies to use the version of the current command for all child [`SubCommand`]s.\n (Defaults to `false`; subcommands have independent version strings from their parents.)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":155863,"byte_end":155869,"line_start":614,"line_end":614,"column_start":5,"column_end":11},"name":"Hidden","qualname":"::app::settings::AppSettings::Hidden","value":"AppSettings::Hidden","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that this [`SubCommand`] should be hidden from help messages","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":156048,"byte_end":156072,"line_start":618,"line_end":618,"column_start":5,"column_end":29},"name":"HidePossibleValuesInHelp","qualname":"::app::settings::AppSettings::HidePossibleValuesInHelp","value":"AppSettings::HidePossibleValuesInHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Tells `clap` *not* to print possible values when displaying help information.\n This can be useful if there are many values, or they are explained elsewhere.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":157570,"byte_end":157586,"line_start":648,"line_end":648,"column_start":5,"column_end":21},"name":"InferSubcommands","qualname":"::app::settings::AppSettings::InferSubcommands","value":"AppSettings::InferSubcommands","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to\n match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":158305,"byte_end":158317,"line_start":666,"line_end":666,"column_start":5,"column_end":17},"name":"NoBinaryName","qualname":"::app::settings::AppSettings::NoBinaryName","value":"AppSettings::NoBinaryName","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that the parser should not assume the first argument passed is the binary name.\n This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one\n one would not normally type the binary or program name for each command.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":158630,"byte_end":158642,"line_start":678,"line_end":678,"column_start":5,"column_end":17},"name":"NextLineHelp","qualname":"::app::settings::AppSettings::NextLineHelp","value":"AppSettings::NextLineHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Places the help string for all arguments on the line after the argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":160184,"byte_end":160209,"line_start":717,"line_end":717,"column_start":5,"column_end":30},"name":"PropagateGlobalValuesDown","qualname":"::app::settings::AppSettings::PropagateGlobalValuesDown","value":"AppSettings::PropagateGlobalValuesDown","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" **DEPRECATED**: This setting is no longer required in order to propagate values up or down","sig":null,"attributes":[{"value":"deprecated(since = \"2.27.0\",\n             note = \"No longer required to propagate values\")","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":160099,"byte_end":160179,"line_start":716,"line_end":716,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":162072,"byte_end":162093,"line_start":762,"line_end":762,"column_start":5,"column_end":26},"name":"SubcommandsNegateReqs","qualname":"::app::settings::AppSettings::SubcommandsNegateReqs","value":"AppSettings::SubcommandsNegateReqs","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Allows [`SubCommand`]s to override all requirements of the parent command.\n For example if you had a subcommand or top level application with a required argument\n that is only required as long as there is no subcommand present,\n using this setting would allow you to set those arguments to [`Arg::required(true)`]\n and yet receive no error so long as the user uses a valid subcommand instead.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":163169,"byte_end":163195,"line_start":785,"line_end":785,"column_start":5,"column_end":31},"name":"SubcommandRequiredElseHelp","qualname":"::app::settings::AppSettings::SubcommandRequiredElseHelp","value":"AppSettings::SubcommandRequiredElseHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that the help text should be displayed (before exiting gracefully) if no\n [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":164388,"byte_end":164398,"line_start":818,"line_end":818,"column_start":5,"column_end":15},"name":"StrictUtf8","qualname":"::app::settings::AppSettings::StrictUtf8","value":"AppSettings::StrictUtf8","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that any invalid UTF-8 code points should be treated as an error and fail\n with a [`ErrorKind::InvalidUtf8`] error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":165128,"byte_end":165146,"line_start":840,"line_end":840,"column_start":5,"column_end":23},"name":"SubcommandRequired","qualname":"::app::settings::AppSettings::SubcommandRequired","value":"AppSettings::SubcommandRequired","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Allows specifying that if no [`SubCommand`] is present at runtime,\n error and exit gracefully.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":166047,"byte_end":166061,"line_start":863,"line_end":863,"column_start":5,"column_end":19},"name":"TrailingVarArg","qualname":"::app::settings::AppSettings::TrailingVarArg","value":"AppSettings::TrailingVarArg","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Specifies that the final positional argument is a \"VarArg\" and that `clap` should not\n attempt to parse any further args.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":166737,"byte_end":166755,"line_start":882,"line_end":882,"column_start":5,"column_end":23},"name":"UnifiedHelpMessage","qualname":"::app::settings::AppSettings::UnifiedHelpMessage","value":"AppSettings::UnifiedHelpMessage","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Groups flags and options together, presenting a more unified help message\n (a la `getopts` or `docopt` style).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":167528,"byte_end":167550,"line_start":904,"line_end":904,"column_start":5,"column_end":27},"name":"VersionlessSubcommands","qualname":"::app::settings::AppSettings::VersionlessSubcommands","value":"AppSettings::VersionlessSubcommands","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Disables `-V` and `--version` for all [`SubCommand`]s\n (Defaults to `false`; subcommands *do* have version flags.)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168352,"byte_end":168363,"line_start":926,"line_end":926,"column_start":5,"column_end":16},"name":"WaitOnError","qualname":"::app::settings::AppSettings::WaitOnError","value":"AppSettings::WaitOnError","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":" Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before\n exiting","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1299},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168385,"byte_end":168401,"line_start":928,"line_end":928,"column_start":20,"column_end":36},"name":"NeedsLongVersion","qualname":"::app::settings::AppSettings::NeedsLongVersion","value":"AppSettings::NeedsLongVersion","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168423,"byte_end":168436,"line_start":930,"line_end":930,"column_start":20,"column_end":33},"name":"NeedsLongHelp","qualname":"::app::settings::AppSettings::NeedsLongHelp","value":"AppSettings::NeedsLongHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1303},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168458,"byte_end":168477,"line_start":932,"line_end":932,"column_start":20,"column_end":39},"name":"NeedsSubcommandHelp","qualname":"::app::settings::AppSettings::NeedsSubcommandHelp","value":"AppSettings::NeedsSubcommandHelp","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1305},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168499,"byte_end":168525,"line_start":934,"line_end":934,"column_start":20,"column_end":46},"name":"LowIndexMultiplePositional","qualname":"::app::settings::AppSettings::LowIndexMultiplePositional","value":"AppSettings::LowIndexMultiplePositional","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1307},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168547,"byte_end":168561,"line_start":936,"line_end":936,"column_start":20,"column_end":34},"name":"TrailingValues","qualname":"::app::settings::AppSettings::TrailingValues","value":"AppSettings::TrailingValues","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168583,"byte_end":168599,"line_start":938,"line_end":938,"column_start":20,"column_end":36},"name":"ValidNegNumFound","qualname":"::app::settings::AppSettings::ValidNegNumFound","value":"AppSettings::ValidNegNumFound","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1311},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168621,"byte_end":168631,"line_start":940,"line_end":940,"column_start":20,"column_end":30},"name":"Propagated","qualname":"::app::settings::AppSettings::Propagated","value":"AppSettings::Propagated","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168653,"byte_end":168666,"line_start":942,"line_end":942,"column_start":20,"column_end":33},"name":"ValidArgFound","qualname":"::app::settings::AppSettings::ValidArgFound","value":"AppSettings::ValidArgFound","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1315},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168688,"byte_end":168700,"line_start":944,"line_end":944,"column_start":20,"column_end":32},"name":"ContainsLast","qualname":"::app::settings::AppSettings::ContainsLast","value":"AppSettings::ContainsLast","parent":{"krate":0,"index":3140},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3140},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":137410,"byte_end":137421,"line_start":128,"line_end":128,"column_start":10,"column_end":21},"name":"AppSettings","qualname":"::app::settings::AppSettings","value":"AppSettings::{AllowInvalidUtf8, AllArgsOverrideSelf, AllowLeadingHyphen, AllowNegativeNumbers, AllowMissingPositional, AllowExternalSubcommands, ArgsNegateSubcommands, ArgRequiredElseHelp, ColoredHelp, ColorAuto, ColorAlways, ColorNever, DontCollapseArgsInUsage, DontDelimitTrailingValues, DisableHelpSubcommand, DisableVersion, DeriveDisplayOrder, GlobalVersion, Hidden, HidePossibleValuesInHelp, InferSubcommands, NoBinaryName, NextLineHelp, PropagateGlobalValuesDown, SubcommandsNegateReqs, SubcommandRequiredElseHelp, StrictUtf8, SubcommandRequired, TrailingVarArg, UnifiedHelpMessage, VersionlessSubcommands, WaitOnError, NeedsLongVersion, NeedsLongHelp, NeedsSubcommandHelp, LowIndexMultiplePositional, TrailingValues, ValidNegNumFound, Propagated, ValidArgFound, ContainsLast}","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1315}],"decl_id":null,"docs":" Application level settings, which affect how [`App`] operates","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":137401,"byte_end":168703,"line_start":128,"line_end":945,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3174},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177533,"byte_end":177539,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"Parser","qualname":"::app::parser::Parser","value":"Parser { meta, g_settings, flags, opts, positionals, subcommands, groups, global_args, required, r_ifs, overrides, help_message, version_message }","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1381},{"krate":0,"index":1383}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177441,"byte_end":177480,"line_start":49,"line_end":49,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1349},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177576,"byte_end":177580,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"meta","qualname":"::app::parser::Parser::meta","value":"app::meta::AppMeta<'b>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1353},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177627,"byte_end":177637,"line_start":58,"line_end":58,"column_start":9,"column_end":19},"name":"g_settings","qualname":"::app::parser::Parser::g_settings","value":"app::settings::AppFlags","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1355},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177657,"byte_end":177662,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"name":"flags","qualname":"::app::parser::Parser::flags","value":"std::vec::Vec<args::arg_builder::flag::FlagBuilder<'a, 'b>>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1357},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177698,"byte_end":177702,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"name":"opts","qualname":"::app::parser::Parser::opts","value":"std::vec::Vec<args::arg_builder::option::OptBuilder<'a, 'b>>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1359},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177737,"byte_end":177748,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"name":"positionals","qualname":"::app::parser::Parser::positionals","value":"map::vec_map::VecMap<args::arg_builder::positional::PosBuilder<'a, 'b>>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1361},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177786,"byte_end":177797,"line_start":62,"line_end":62,"column_start":9,"column_end":20},"name":"subcommands","qualname":"::app::parser::Parser::subcommands","value":"std::vec::Vec<app::App<'a, 'b>>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1363},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177825,"byte_end":177831,"line_start":63,"line_end":63,"column_start":9,"column_end":15},"name":"groups","qualname":"::app::parser::Parser::groups","value":"std::vec::Vec<args::group::ArgGroup<'a>>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1365},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177860,"byte_end":177871,"line_start":64,"line_end":64,"column_start":9,"column_end":20},"name":"global_args","qualname":"::app::parser::Parser::global_args","value":"std::vec::Vec<args::arg::Arg<'a, 'b>>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1367},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177899,"byte_end":177907,"line_start":65,"line_end":65,"column_start":9,"column_end":17},"name":"required","qualname":"::app::parser::Parser::required","value":"std::vec::Vec<&'a str>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1369},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177931,"byte_end":177936,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"name":"r_ifs","qualname":"::app::parser::Parser::r_ifs","value":"std::vec::Vec<(&'a str, &'b str, &'a str)>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1371},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":177980,"byte_end":177989,"line_start":67,"line_end":67,"column_start":9,"column_end":18},"name":"overrides","qualname":"::app::parser::Parser::overrides","value":"std::vec::Vec<(&'b str, &'a str)>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1379},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178115,"byte_end":178127,"line_start":71,"line_end":71,"column_start":9,"column_end":21},"name":"help_message","qualname":"::app::parser::Parser::help_message","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1381},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178154,"byte_end":178169,"line_start":72,"line_end":72,"column_start":9,"column_end":24},"name":"version_message","qualname":"::app::parser::Parser::version_message","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178276,"byte_end":178285,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Parser<'a, 'b>>::with_name","value":"fn (n: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178505,"byte_end":178515,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"help_short","qualname":"<Parser<'a, 'b>>::help_short","value":"fn (&mut self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178711,"byte_end":178724,"line_start":97,"line_end":97,"column_start":12,"column_end":25},"name":"version_short","qualname":"<Parser<'a, 'b>>::version_short","value":"fn (&mut self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178923,"byte_end":178941,"line_start":105,"line_end":105,"column_start":12,"column_end":30},"name":"gen_completions_to","qualname":"<Parser<'a, 'b>>::gen_completions_to","value":"fn <W> (&mut self, for_shell: Shell, buf: &mut W) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179314,"byte_end":179329,"line_start":117,"line_end":117,"column_start":12,"column_end":27},"name":"gen_completions","qualname":"<Parser<'a, 'b>>::gen_completions","value":"fn (&mut self, for_shell: Shell, od: OsString) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":185598,"byte_end":185605,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"add_arg","qualname":"<Parser<'a, 'b>>::add_arg","value":"fn (&mut self, a: Arg<'a, 'b>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":186781,"byte_end":186792,"line_start":318,"line_end":318,"column_start":12,"column_end":23},"name":"add_arg_ref","qualname":"<Parser<'a, 'b>>::add_arg_ref","value":"fn (&mut self, a: &Arg<'a, 'b>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":187836,"byte_end":187845,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"add_group","qualname":"<Parser<'a, 'b>>::add_group","value":"fn (&mut self, group: ArgGroup<'a>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":188745,"byte_end":188759,"line_start":370,"line_end":370,"column_start":12,"column_end":26},"name":"add_subcommand","qualname":"<Parser<'a, 'b>>::add_subcommand","value":"fn (&mut self, mut subcmd: App<'a, 'b>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":189156,"byte_end":189174,"line_start":384,"line_end":384,"column_start":12,"column_end":30},"name":"propagate_settings","qualname":"<Parser<'a, 'b>>::propagate_settings","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":190604,"byte_end":190624,"line_start":420,"line_end":420,"column_start":12,"column_end":32},"name":"derive_display_order","qualname":"<Parser<'a, 'b>>::derive_display_order","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191620,"byte_end":191628,"line_start":450,"line_end":450,"column_start":12,"column_end":20},"name":"required","qualname":"<Parser<'a, 'b>>::required","value":"fn (&self) -> Iter<&str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191760,"byte_end":191768,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"has_args","qualname":"<Parser<'a, 'b>>::has_args","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191739,"byte_end":191748,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191906,"byte_end":191914,"line_start":459,"line_end":459,"column_start":12,"column_end":20},"name":"has_opts","qualname":"<Parser<'a, 'b>>::has_opts","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191885,"byte_end":191894,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191982,"byte_end":191991,"line_start":462,"line_end":462,"column_start":12,"column_end":21},"name":"has_flags","qualname":"<Parser<'a, 'b>>::has_flags","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":191961,"byte_end":191970,"line_start":461,"line_end":461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192060,"byte_end":192075,"line_start":465,"line_end":465,"column_start":12,"column_end":27},"name":"has_positionals","qualname":"<Parser<'a, 'b>>::has_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192039,"byte_end":192048,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192150,"byte_end":192165,"line_start":468,"line_end":468,"column_start":12,"column_end":27},"name":"has_subcommands","qualname":"<Parser<'a, 'b>>::has_subcommands","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192129,"byte_end":192138,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192240,"byte_end":192256,"line_start":471,"line_end":471,"column_start":12,"column_end":28},"name":"has_visible_opts","qualname":"<Parser<'a, 'b>>::has_visible_opts","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192219,"byte_end":192228,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192441,"byte_end":192458,"line_start":479,"line_end":479,"column_start":12,"column_end":29},"name":"has_visible_flags","qualname":"<Parser<'a, 'b>>::has_visible_flags","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192420,"byte_end":192429,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192645,"byte_end":192668,"line_start":487,"line_end":487,"column_start":12,"column_end":35},"name":"has_visible_positionals","qualname":"<Parser<'a, 'b>>::has_visible_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192624,"byte_end":192633,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192895,"byte_end":192918,"line_start":497,"line_end":497,"column_start":12,"column_end":35},"name":"has_visible_subcommands","qualname":"<Parser<'a, 'b>>::has_visible_subcommands","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192874,"byte_end":192883,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193162,"byte_end":193168,"line_start":506,"line_end":506,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Parser<'a, 'b>>::is_set","value":"fn (&self, s: AS) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193141,"byte_end":193150,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193245,"byte_end":193248,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"set","qualname":"<Parser<'a, 'b>>::set","value":"fn (&mut self, s: AS) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193224,"byte_end":193233,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193318,"byte_end":193323,"line_start":512,"line_end":512,"column_start":12,"column_end":17},"name":"unset","qualname":"<Parser<'a, 'b>>::unset","value":"fn (&mut self, s: AS) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193297,"byte_end":193306,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193451,"byte_end":193469,"line_start":515,"line_end":515,"column_start":12,"column_end":30},"name":"verify_positionals","qualname":"<Parser<'a, 'b>>::verify_positionals","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":199510,"byte_end":199527,"line_start":645,"line_end":645,"column_start":12,"column_end":29},"name":"propagate_globals","qualname":"<Parser<'a, 'b>>::propagate_globals","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":206939,"byte_end":206955,"line_start":843,"line_end":843,"column_start":12,"column_end":28},"name":"get_matches_with","qualname":"<Parser<'a, 'b>>::get_matches_with","value":"fn <I, T> (&mut self, matcher: &mut ArgMatcher<'a>, it: &mut Peekable<I>) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":227918,"byte_end":227932,"line_start":1340,"line_end":1340,"column_start":12,"column_end":26},"name":"groups_for_arg","qualname":"<Parser<'a, 'b>>::groups_for_arg","value":"fn (&self, name: &str) -> Option<Vec<&'a str>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":228619,"byte_end":228632,"line_start":1364,"line_end":1364,"column_start":12,"column_end":25},"name":"args_in_group","qualname":"<Parser<'a, 'b>>::args_in_group","value":"fn (&self, group: &str) -> Vec<String>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":229540,"byte_end":229558,"line_start":1392,"line_end":1392,"column_start":12,"column_end":30},"name":"arg_names_in_group","qualname":"<Parser<'a, 'b>>::arg_names_in_group","value":"fn (&self, group: &str) -> Vec<&'a str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":230123,"byte_end":230146,"line_start":1413,"line_end":1413,"column_start":12,"column_end":35},"name":"create_help_and_version","qualname":"<Parser<'a, 'b>>::create_help_and_version","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":249231,"byte_end":249244,"line_start":1907,"line_end":1907,"column_start":12,"column_end":25},"name":"write_version","qualname":"<Parser<'a, 'b>>::write_version","value":"fn <W> (&self, w: &mut W, use_long: bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":250052,"byte_end":250062,"line_start":1929,"line_end":1929,"column_start":12,"column_end":22},"name":"print_help","qualname":"<Parser<'a, 'b>>::print_help","value":"fn (&self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":250228,"byte_end":250238,"line_start":1935,"line_end":1935,"column_start":12,"column_end":22},"name":"write_help","qualname":"<Parser<'a, 'b>>::write_help","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":250353,"byte_end":250368,"line_start":1939,"line_end":1939,"column_start":12,"column_end":27},"name":"write_long_help","qualname":"<Parser<'a, 'b>>::write_long_help","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":250482,"byte_end":250496,"line_start":1943,"line_end":1943,"column_start":12,"column_end":26},"name":"write_help_err","qualname":"<Parser<'a, 'b>>::write_help_err","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":250614,"byte_end":250626,"line_start":1947,"line_end":1947,"column_start":12,"column_end":24},"name":"add_defaults","qualname":"<Parser<'a, 'b>>::add_defaults","value":"fn (&mut self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":253990,"byte_end":253997,"line_start":2022,"line_end":2022,"column_start":12,"column_end":19},"name":"add_env","qualname":"<Parser<'a, 'b>>::add_env","value":"fn (&mut self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":255275,"byte_end":255280,"line_start":2056,"line_end":2056,"column_start":12,"column_end":17},"name":"flags","qualname":"<Parser<'a, 'b>>::flags","value":"fn (&self) -> Iter<FlagBuilder<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":255351,"byte_end":255355,"line_start":2058,"line_end":2058,"column_start":12,"column_end":16},"name":"opts","qualname":"<Parser<'a, 'b>>::opts","value":"fn (&self) -> Iter<OptBuilder<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":255424,"byte_end":255435,"line_start":2060,"line_end":2060,"column_start":12,"column_end":23},"name":"positionals","qualname":"<Parser<'a, 'b>>::positionals","value":"fn (&self) -> map::Values<PosBuilder<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":255520,"byte_end":255531,"line_start":2062,"line_end":2062,"column_start":12,"column_end":23},"name":"subcommands","qualname":"<Parser<'a, 'b>>::subcommands","value":"fn (&self) -> Iter<App>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":255701,"byte_end":255706,"line_start":2066,"line_end":2066,"column_start":12,"column_end":17},"name":"color","qualname":"<Parser<'a, 'b>>::color","value":"fn (&self) -> ColorWhen","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":256134,"byte_end":256146,"line_start":2081,"line_end":2081,"column_start":12,"column_end":24},"name":"find_any_arg","qualname":"<Parser<'a, 'b>>::find_any_arg","value":"fn (&self, name: &str) -> Option<&AnyArg<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":257396,"byte_end":257411,"line_start":2121,"line_end":2121,"column_start":12,"column_end":27},"name":"find_subcommand","qualname":"<Parser<'a, 'b>>::find_subcommand","value":"fn (&'b self, sc: &str) -> Option<&'b App<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3190},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258474,"byte_end":258481,"line_start":4,"line_end":4,"column_start":12,"column_end":19},"name":"AppMeta","qualname":"::app::meta::AppMeta","value":"AppMeta { name, bin_name, author, version, long_version, about, long_about, more_help, pre_help, aliases, usage_str, usage, help_str, disp_ord, term_w, max_w, template }","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1617}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258397,"byte_end":258436,"line_start":2,"line_end":2,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1585},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258496,"byte_end":258500,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"name","qualname":"::app::meta::AppMeta::name","value":"std::string::String","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1587},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258518,"byte_end":258526,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"name":"bin_name","qualname":"::app::meta::AppMeta::bin_name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1589},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258552,"byte_end":258558,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"name":"author","qualname":"::app::meta::AppMeta::author","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1591},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258585,"byte_end":258592,"line_start":8,"line_end":8,"column_start":9,"column_end":16},"name":"version","qualname":"::app::meta::AppMeta::version","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1593},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258619,"byte_end":258631,"line_start":9,"line_end":9,"column_start":9,"column_end":21},"name":"long_version","qualname":"::app::meta::AppMeta::long_version","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1595},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258658,"byte_end":258663,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"name":"about","qualname":"::app::meta::AppMeta::about","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1597},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258690,"byte_end":258700,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"name":"long_about","qualname":"::app::meta::AppMeta::long_about","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1599},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258727,"byte_end":258736,"line_start":12,"line_end":12,"column_start":9,"column_end":18},"name":"more_help","qualname":"::app::meta::AppMeta::more_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1601},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258763,"byte_end":258771,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"name":"pre_help","qualname":"::app::meta::AppMeta::pre_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1603},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258798,"byte_end":258805,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"aliases","qualname":"::app::meta::AppMeta::aliases","value":"std::option::Option<std::vec::Vec<(&'b str, bool)>>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1605},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258864,"byte_end":258873,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"usage_str","qualname":"::app::meta::AppMeta::usage_str","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1607},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258900,"byte_end":258905,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"usage","qualname":"::app::meta::AppMeta::usage","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1609},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258931,"byte_end":258939,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"help_str","qualname":"::app::meta::AppMeta::help_str","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1611},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258966,"byte_end":258974,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"disp_ord","qualname":"::app::meta::AppMeta::disp_ord","value":"usize","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1613},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":258991,"byte_end":258997,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"name":"term_w","qualname":"::app::meta::AppMeta::term_w","value":"std::option::Option<usize>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1615},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":259022,"byte_end":259027,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"max_w","qualname":"::app::meta::AppMeta::max_w","value":"std::option::Option<usize>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1617},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":259052,"byte_end":259060,"line_start":21,"line_end":21,"column_start":9,"column_end":17},"name":"template","qualname":"::app::meta::AppMeta::template","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":259116,"byte_end":259119,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<AppMeta<'b>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":259164,"byte_end":259173,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"with_name","qualname":"<AppMeta<'b>>::with_name","value":"fn (s: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":752},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63408,"byte_end":63411,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"App","qualname":"::app::App","value":"App { p }","parent":null,"children":[{"krate":0,"index":549}],"decl_id":null,"docs":" Used to create a representation of a command line program and all possible command line\n arguments. Application settings are set using the \"builder pattern\" with the\n [`App::get_matches`] family of methods being the terminal methods that starts the\n runtime-parsing process. These methods then return information about the user supplied\n arguments (or lack there of).","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63357,"byte_end":63396,"line_start":59,"line_end":59,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":549},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63463,"byte_end":63464,"line_start":64,"line_end":64,"column_start":24,"column_end":25},"name":"p","qualname":"::app::App::p","value":"app::parser::Parser<'a, 'b>","parent":{"krate":0,"index":752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63923,"byte_end":63926,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<App<'a, 'b>>::new","value":"fn <S> (n: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an application requiring a name. The name may be, but doesn't\n have to be same as the binary. The name will be displayed to the user when they request to\n print version or help and usage information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64078,"byte_end":64086,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"get_name","qualname":"<App<'a, 'b>>::get_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the app\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64171,"byte_end":64183,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"get_bin_name","qualname":"<App<'a, 'b>>::get_bin_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the binary\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64976,"byte_end":64989,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"with_defaults","qualname":"<App<'a, 'b>>::with_defaults","value":"fn <S> (n: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an application requiring a name, but uses the [`crate_authors!`]\n and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.","sig":null,"attributes":[{"value":"deprecated(since = \"2.14.1\",\n             note =\n                 \"Can never work; use explicit App::author() and App::version() calls instead\")","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64851,"byte_end":64964,"line_start":106,"line_end":106,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":68056,"byte_end":68062,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"author","qualname":"<App<'a, 'b>>::author","value":"fn <S> (mut self, author: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of author(s) that will be displayed to the user when they\n request the help information with `--help` or `-h`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":68877,"byte_end":68885,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"bin_name","qualname":"<App<'a, 'b>>::bin_name","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Overrides the system-determined binary name. This should only be used when absolutely\n necessary, such as when the binary name for your application is misleading, or perhaps\n *not* how the user should invoke your program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":69711,"byte_end":69716,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"name":"about","qualname":"<App<'a, 'b>>::about","value":"fn <S> (mut self, about: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string describing what the program does. This will be displayed when displaying help\n information with `-h`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":70688,"byte_end":70698,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"long_about","qualname":"<App<'a, 'b>>::long_about","value":"fn <S> (mut self, about: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string describing what the program does. This will be displayed when displaying help\n information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":71631,"byte_end":71635,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"name":"name","qualname":"<App<'a, 'b>>::name","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the program's name. This will be displayed when displaying help information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":72244,"byte_end":72254,"line_start":294,"line_end":294,"column_start":12,"column_end":22},"name":"after_help","qualname":"<App<'a, 'b>>::after_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds additional help information to be displayed in addition to auto-generated help. This\n information is displayed **after** the auto-generated help information. This is often used\n to describe how to use the arguments, or caveats to be noted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":72821,"byte_end":72832,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"before_help","qualname":"<App<'a, 'b>>::before_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds additional help information to be displayed in addition to auto-generated help. This\n information is displayed **before** the auto-generated help information. This is often used\n for header information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":73893,"byte_end":73900,"line_start":337,"line_end":337,"column_start":12,"column_end":19},"name":"version","qualname":"<App<'a, 'b>>::version","value":"fn <S> (mut self, ver: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of the version number to be displayed when displaying version or help\n information with `-V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":75064,"byte_end":75076,"line_start":368,"line_end":368,"column_start":12,"column_end":24},"name":"long_version","qualname":"<App<'a, 'b>>::long_version","value":"fn <S> (mut self, ver: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of the version number to be displayed when displaying version or help\n information with `--version`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":76195,"byte_end":76200,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"usage","qualname":"<App<'a, 'b>>::usage","value":"fn <S> (mut self, usage: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a custom usage string to override the auto-generated usage string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":77711,"byte_end":77715,"line_start":436,"line_end":436,"column_start":12,"column_end":16},"name":"help","qualname":"<App<'a, 'b>>::help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a custom help message and overrides the auto-generated one. This should only be used\n when the auto-generated message does not suffice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":78736,"byte_end":78746,"line_start":462,"line_end":462,"column_start":12,"column_end":22},"name":"help_short","qualname":"<App<'a, 'b>>::help_short","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the [`short`] for the auto-generated `help` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":79760,"byte_end":79773,"line_start":488,"line_end":488,"column_start":12,"column_end":25},"name":"version_short","qualname":"<App<'a, 'b>>::version_short","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the [`short`] for the auto-generated `version` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":80413,"byte_end":80425,"line_start":508,"line_end":508,"column_start":12,"column_end":24},"name":"help_message","qualname":"<App<'a, 'b>>::help_message","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help text for the auto-generated `help` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":81071,"byte_end":81086,"line_start":526,"line_end":526,"column_start":12,"column_end":27},"name":"version_message","qualname":"<App<'a, 'b>>::version_message","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help text for the auto-generated `version` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":83069,"byte_end":83077,"line_start":569,"line_end":569,"column_start":12,"column_end":20},"name":"template","qualname":"<App<'a, 'b>>::template","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help template to be used, overriding the default format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":83700,"byte_end":83707,"line_start":589,"line_end":589,"column_start":12,"column_end":19},"name":"setting","qualname":"<App<'a, 'b>>::setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables a single command, or [`SubCommand`], level settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":84317,"byte_end":84325,"line_start":609,"line_end":609,"column_start":12,"column_end":20},"name":"settings","qualname":"<App<'a, 'b>>::settings","value":"fn (mut self, settings: &[AppSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables multiple command, or [`SubCommand`], level settings","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":85054,"byte_end":85068,"line_start":632,"line_end":632,"column_start":12,"column_end":26},"name":"global_setting","qualname":"<App<'a, 'b>>::global_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables a single setting that is propagated down through all child [`SubCommand`]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":85856,"byte_end":85871,"line_start":655,"line_end":655,"column_start":12,"column_end":27},"name":"global_settings","qualname":"<App<'a, 'b>>::global_settings","value":"fn (mut self, settings: &[AppSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables multiple settings which are propagated *down* through all child [`SubCommand`]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":86498,"byte_end":86511,"line_start":677,"line_end":677,"column_start":12,"column_end":25},"name":"unset_setting","qualname":"<App<'a, 'b>>::unset_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disables a single command, or [`SubCommand`], level setting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":87127,"byte_end":87141,"line_start":697,"line_end":697,"column_start":12,"column_end":26},"name":"unset_settings","qualname":"<App<'a, 'b>>::unset_settings","value":"fn (mut self, settings: &[AppSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disables multiple command, or [`SubCommand`], level settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":88306,"byte_end":88320,"line_start":729,"line_end":729,"column_start":12,"column_end":26},"name":"set_term_width","qualname":"<App<'a, 'b>>::set_term_width","value":"fn (mut self, width: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will\n ignore terminal widths and use source formatting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":89325,"byte_end":89339,"line_start":757,"line_end":757,"column_start":12,"column_end":26},"name":"max_term_width","qualname":"<App<'a, 'b>>::max_term_width","value":"fn (mut self, w: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal\n widths and use source formatting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":90196,"byte_end":90199,"line_start":783,"line_end":783,"column_start":12,"column_end":15},"name":"arg","qualname":"<App<'a, 'b>>::arg","value":"fn <A> (mut self, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [argument] to the list of valid possibilities.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":90746,"byte_end":90750,"line_start":802,"line_end":802,"column_start":12,"column_end":16},"name":"args","qualname":"<App<'a, 'b>>::args","value":"fn (mut self, args: &[Arg<'a, 'b>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] to the list of valid possibilities","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":91603,"byte_end":91617,"line_start":826,"line_end":826,"column_start":12,"column_end":26},"name":"arg_from_usage","qualname":"<App<'a, 'b>>::arg_from_usage","value":"fn (mut self, usage: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for adding a single [argument] from a usage type string. The string\n used follows the same rules and syntax as [`Arg::from_usage`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":92615,"byte_end":92630,"line_start":853,"line_end":853,"column_start":12,"column_end":27},"name":"args_from_usage","qualname":"<App<'a, 'b>>::args_from_usage","value":"fn (mut self, usage: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] at once from a usage string, one per line. See\n [`Arg::from_usage`] for details on the syntax and rules supported.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":93646,"byte_end":93651,"line_start":880,"line_end":880,"column_start":12,"column_end":17},"name":"alias","qualname":"<App<'a, 'b>>::alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that\n automatically dispatch as if this subcommand was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":94915,"byte_end":94922,"line_start":909,"line_end":909,"column_start":12,"column_end":19},"name":"aliases","qualname":"<App<'a, 'b>>::aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that\n automatically dispatch as if this subcommand was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":95907,"byte_end":95920,"line_start":935,"line_end":935,"column_start":12,"column_end":25},"name":"visible_alias","qualname":"<App<'a, 'b>>::visible_alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`SubCommand`] alias that functions exactly like those defined with\n [`App::alias`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":96876,"byte_end":96891,"line_start":959,"line_end":959,"column_start":12,"column_end":27},"name":"visible_aliases","qualname":"<App<'a, 'b>>::visible_aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined\n with [`App::aliases`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":98862,"byte_end":98867,"line_start":1004,"line_end":1004,"column_start":12,"column_end":17},"name":"group","qualname":"<App<'a, 'b>>::group","value":"fn (mut self, group: ArgGroup<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments.\n By placing them in a logical group, you can build easier requirement and exclusion rules.\n For instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only*\n one) argument from that group must be present at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":99874,"byte_end":99880,"line_start":1034,"line_end":1034,"column_start":12,"column_end":18},"name":"groups","qualname":"<App<'a, 'b>>::groups","value":"fn (mut self, groups: &[ArgGroup<'a>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [`ArgGroup`]s to the [`App`] at once.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":100781,"byte_end":100791,"line_start":1058,"line_end":1058,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<App<'a, 'b>>::subcommand","value":"fn (mut self, subcmd: App<'a, 'b>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively\n sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage,\n etc. They also function just like [`App`]s, in that they get their own auto generated help,\n version, and usage.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":101612,"byte_end":101623,"line_start":1079,"line_end":1079,"column_start":12,"column_end":23},"name":"subcommands","qualname":"<App<'a, 'b>>::subcommands","value":"fn <I> (mut self, subcmds: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple subcommands to the list of valid possibilities by iterating over an\n [`IntoIterator`] of [`SubCommand`]s","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":104020,"byte_end":104033,"line_start":1136,"line_end":1136,"column_start":12,"column_end":25},"name":"display_order","qualname":"<App<'a, 'b>>::display_order","value":"fn (mut self, ord: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower\n value will be displayed first in the help message. This is helpful when one would like to\n emphasise frequently used subcommands, or prioritize those towards the top of the list.\n Duplicate values **are** allowed. Subcommands with duplicate display orders will be\n displayed in alphabetical order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":104893,"byte_end":104903,"line_start":1158,"line_end":1158,"column_start":12,"column_end":22},"name":"print_help","qualname":"<App<'a, 'b>>::print_help","value":"fn (&mut self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\n method as if someone ran `-h` to request the help message","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":106155,"byte_end":106170,"line_start":1188,"line_end":1188,"column_start":12,"column_end":27},"name":"print_long_help","qualname":"<App<'a, 'b>>::print_long_help","value":"fn (&mut self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\n method as if someone ran `--help` to request the help message","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":107648,"byte_end":107658,"line_start":1223,"line_end":1223,"column_start":12,"column_end":22},"name":"write_help","qualname":"<App<'a, 'b>>::write_help","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the full help message to the user to a [`io::Write`] object in the same method as if\n the user ran `-h`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":108944,"byte_end":108959,"line_start":1254,"line_end":1254,"column_start":12,"column_end":27},"name":"write_long_help","qualname":"<App<'a, 'b>>::write_long_help","value":"fn <W> (&mut self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the full help message to the user to a [`io::Write`] object in the same method as if\n the user ran `--help`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":109967,"byte_end":109980,"line_start":1280,"line_end":1280,"column_start":12,"column_end":25},"name":"write_version","qualname":"<App<'a, 'b>>::write_version","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":110824,"byte_end":110842,"line_start":1301,"line_end":1301,"column_start":12,"column_end":30},"name":"write_long_version","qualname":"<App<'a, 'b>>::write_long_version","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the version message to the user to a [`io::Write`] object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":113985,"byte_end":114000,"line_start":1388,"line_end":1388,"column_start":12,"column_end":27},"name":"gen_completions","qualname":"<App<'a, 'b>>::gen_completions","value":"fn <T, S> (&mut self, bin_name: S, for_shell: Shell, out_dir: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a completions file for a specified shell at compile time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":115358,"byte_end":115376,"line_start":1431,"line_end":1431,"column_start":12,"column_end":30},"name":"gen_completions_to","qualname":"<App<'a, 'b>>::gen_completions_to","value":"fn <W, S> (&mut self, bin_name: S, for_shell: Shell, buf: &mut W) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a completions file for a specified shell at runtime.  Until `cargo install` can\n install extra files like a completion script, this may be used e.g. in a command that\n outputs the contents of the completion script, to be redirected into a file by the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":116248,"byte_end":116259,"line_start":1455,"line_end":1455,"column_start":12,"column_end":23},"name":"get_matches","qualname":"<App<'a, 'b>>::get_matches","value":"fn (self) -> ArgMatches<'a>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process, upon a failed parse an error will be displayed to the user and\n the process will exit with the appropriate error code. By default this method gets all user\n provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points,\n which are legal on many platforms.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":117651,"byte_end":117667,"line_start":1482,"line_end":1482,"column_start":12,"column_end":28},"name":"get_matches_safe","qualname":"<App<'a, 'b>>::get_matches_safe","value":"fn (self) -> ClapResult<ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting\n the process on failed parse. By default this method gets matches from [`env::args_os`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":118798,"byte_end":118814,"line_start":1508,"line_end":1508,"column_start":12,"column_end":28},"name":"get_matches_from","qualname":"<App<'a, 'b>>::get_matches_from","value":"fn <I, T> (mut self, itr: I) -> ArgMatches<'a>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`]\n and will automatically exit with an error message. This method, however, lets you specify\n what iterator to use when performing matches, such as a [`Vec`] of your making.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":121270,"byte_end":121291,"line_start":1565,"line_end":1565,"column_start":12,"column_end":33},"name":"get_matches_from_safe","qualname":"<App<'a, 'b>>::get_matches_from_safe","value":"fn <I, T> (mut self, itr: I) -> ClapResult<ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. A combination of [`App::get_matches_from`], and\n [`App::get_matches_safe`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":122450,"byte_end":122478,"line_start":1594,"line_end":1594,"column_start":12,"column_end":40},"name":"get_matches_from_safe_borrow","qualname":"<App<'a, 'b>>::get_matches_from_safe_borrow","value":"fn <I, T> (&mut self, itr: I) -> ClapResult<ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process without consuming the [`App`] struct `self`. This is normally not\n the desired functionality, instead prefer [`App::get_matches_from_safe`] which *does*\n consume `self`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3218},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340378,"byte_end":340381,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"Arg","qualname":"::args::arg::Arg","value":"Arg { b, s, v, index, r_ifs }","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767}],"decl_id":null,"docs":" The abstract representation of a command line argument. Used to set all the options and\n relationships that define a valid argument for the program.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340301,"byte_end":340340,"line_start":41,"line_end":41,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1759},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340433,"byte_end":340434,"line_start":47,"line_end":47,"column_start":24,"column_end":25},"name":"b","qualname":"::args::arg::Arg::b","value":"args::arg_builder::base::Base<'a, 'b>","parent":{"krate":0,"index":3218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1761},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340473,"byte_end":340474,"line_start":48,"line_end":48,"column_start":24,"column_end":25},"name":"s","qualname":"::args::arg::Arg::s","value":"args::arg_builder::switched::Switched<'b>","parent":{"krate":0,"index":3218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1763},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340513,"byte_end":340514,"line_start":49,"line_end":49,"column_start":24,"column_end":25},"name":"v","qualname":"::args::arg::Arg::v","value":"args::arg_builder::valued::Valued<'a, 'b>","parent":{"krate":0,"index":3218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1765},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340555,"byte_end":340560,"line_start":50,"line_end":50,"column_start":24,"column_end":29},"name":"index","qualname":"::args::arg::Arg::index","value":"std::option::Option<u64>","parent":{"krate":0,"index":3218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1767},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340598,"byte_end":340603,"line_start":51,"line_end":51,"column_start":24,"column_end":29},"name":"r_ifs","qualname":"::args::arg::Arg::r_ifs","value":"std::option::Option<std::vec::Vec<(&'a str, &'b str)>>","parent":{"krate":0,"index":3218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":341446,"byte_end":341455,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Arg<'a, 'b>>::with_name","value":"fn (n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of [`Arg`] using a unique string name. The name will be used to get\n information about whether or not the argument was used at runtime, get values, set\n relationships with other args, etc..","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":350380,"byte_end":350390,"line_start":289,"line_end":289,"column_start":12,"column_end":22},"name":"from_usage","qualname":"<Arg<'a, 'b>>::from_usage","value":"fn (u: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings\n for the [`Arg`]. The syntax is flexible, but there are some rules to follow.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":351825,"byte_end":351830,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"name":"short","qualname":"<Arg<'a, 'b>>::short","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the short version of the argument without the preceding `-`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":353325,"byte_end":353329,"line_start":370,"line_end":370,"column_start":12,"column_end":16},"name":"long","qualname":"<Arg<'a, 'b>>::long","value":"fn (mut self, l: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the long version of the argument without the preceding `--`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":354292,"byte_end":354297,"line_start":396,"line_end":396,"column_start":12,"column_end":17},"name":"alias","qualname":"<Arg<'a, 'b>>::alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that\n automatically dispatch as if this argument was used. This is more efficient, and easier\n than creating multiple hidden arguments as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":355458,"byte_end":355465,"line_start":426,"line_end":426,"column_start":12,"column_end":19},"name":"aliases","qualname":"<Arg<'a, 'b>>::aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that\n automatically dispatch as if this argument was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":356571,"byte_end":356584,"line_start":457,"line_end":457,"column_start":12,"column_end":25},"name":"visible_alias","qualname":"<Arg<'a, 'b>>::visible_alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`Arg`] alias that functions exactly like those defined with\n [`Arg::alias`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":357544,"byte_end":357559,"line_start":484,"line_end":484,"column_start":12,"column_end":27},"name":"visible_aliases","qualname":"<Arg<'a, 'b>>::visible_aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding multiple [`Arg`] aliases that functions exactly like those defined\n with [`Arg::aliases`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":359681,"byte_end":359685,"line_start":545,"line_end":545,"column_start":12,"column_end":16},"name":"help","qualname":"<Arg<'a, 'b>>::help","value":"fn (mut self, h: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the short help text of the argument that will be displayed to the user when they print\n the help information with `-h`. Typically, this is a short (one line) description of the\n arg.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":362241,"byte_end":362250,"line_start":616,"line_end":616,"column_start":12,"column_end":21},"name":"long_help","qualname":"<Arg<'a, 'b>>::long_help","value":"fn (mut self, h: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the long help text of the argument that will be displayed to the user when they print\n the help information with `--help`. Typically this a more detailed (multi-line) message\n that describes the arg.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":365689,"byte_end":365693,"line_start":693,"line_end":693,"column_start":12,"column_end":16},"name":"last","qualname":"<Arg<'a, 'b>>::last","value":"fn (self, l: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that this arg is the last, or final, positional argument (i.e. has the highest\n index) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\n last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax\n they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\n allows one to access this arg early using the `--` syntax. Accessing an arg early, even with\n the `--` syntax is otherwise not possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":367701,"byte_end":367709,"line_start":752,"line_end":752,"column_start":12,"column_end":20},"name":"required","qualname":"<Arg<'a, 'b>>::required","value":"fn (self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether or not the argument is required by default. Required by default means it is\n required, when no other conflicting rules have been evaluated. Conflicting rules take\n precedence over being required. **Default:** `false`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":369783,"byte_end":369797,"line_start":814,"line_end":814,"column_start":12,"column_end":26},"name":"require_equals","qualname":"<Arg<'a, 'b>>::require_equals","value":"fn (mut self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Requires that options use the `--option=val` syntax (i.e. an equals between the option and\n associated value) **Default:** `false`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":372396,"byte_end":372415,"line_start":879,"line_end":879,"column_start":12,"column_end":31},"name":"allow_hyphen_values","qualname":"<Arg<'a, 'b>>::allow_hyphen_values","value":"fn (self, a: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows values which start with a leading hyphen (`-`)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":374644,"byte_end":374659,"line_start":942,"line_end":942,"column_start":12,"column_end":27},"name":"required_unless","qualname":"<Arg<'a, 'b>>::required_unless","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an arg that override this arg's required setting. (i.e. this arg will be required\n unless this other argument is present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":377240,"byte_end":377259,"line_start":1014,"line_end":1014,"column_start":12,"column_end":31},"name":"required_unless_all","qualname":"<Arg<'a, 'b>>::required_unless_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets args that override this arg's required setting. (i.e. this arg will be required unless\n all these other arguments are present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":380050,"byte_end":380069,"line_start":1090,"line_end":1090,"column_start":12,"column_end":31},"name":"required_unless_one","qualname":"<Arg<'a, 'b>>::required_unless_one","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets args that override this arg's [required] setting. (i.e. this arg will be required\n unless *at least one of* these other arguments are present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":381817,"byte_end":381831,"line_start":1138,"line_end":1138,"column_start":12,"column_end":26},"name":"conflicts_with","qualname":"<Arg<'a, 'b>>::conflicts_with","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a conflicting argument by name. I.e. when using this argument,\n the following argument can't be present and vice versa.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":383674,"byte_end":383692,"line_start":1188,"line_end":1188,"column_start":12,"column_end":30},"name":"conflicts_with_all","qualname":"<Arg<'a, 'b>>::conflicts_with_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per\n argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":388806,"byte_end":388820,"line_start":1297,"line_end":1297,"column_start":12,"column_end":26},"name":"overrides_with","qualname":"<Arg<'a, 'b>>::overrides_with","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a overridable argument by name. I.e. this argument and the following argument\n will override each other in POSIX style (whichever argument was specified at runtime\n **last** \"wins\")","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":390380,"byte_end":390398,"line_start":1333,"line_end":1333,"column_start":12,"column_end":30},"name":"overrides_with_all","qualname":"<Arg<'a, 'b>>::overrides_with_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple mutually overridable arguments by name. I.e. this argument and the following\n argument will override each other in POSIX style (whichever argument was specified at\n runtime **last** \"wins\")","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":392653,"byte_end":392661,"line_start":1399,"line_end":1399,"column_start":12,"column_end":20},"name":"requires","qualname":"<Arg<'a, 'b>>::requires","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an argument by name that is required when this one is present I.e. when\n using this argument, the following argument *must* be present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":395024,"byte_end":395035,"line_start":1469,"line_end":1469,"column_start":12,"column_end":23},"name":"requires_if","qualname":"<Arg<'a, 'b>>::requires_if","value":"fn (mut self, val: &'b str, arg: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows a conditional requirement. The requirement will only become valid if this arg's value\n equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":397115,"byte_end":397127,"line_start":1529,"line_end":1529,"column_start":12,"column_end":24},"name":"requires_ifs","qualname":"<Arg<'a, 'b>>::requires_ifs","value":"fn (mut self, ifs: &[(&'b str, &'a str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows multiple conditional requirements. The requirement will only become valid if this arg's value\n equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":399798,"byte_end":399809,"line_start":1607,"line_end":1607,"column_start":12,"column_end":23},"name":"required_if","qualname":"<Arg<'a, 'b>>::required_if","value":"fn (mut self, arg: &'a str, val: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows specifying that an argument is [required] conditionally. The requirement will only\n become valid if the specified `arg`'s value equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":402927,"byte_end":402939,"line_start":1696,"line_end":1696,"column_start":12,"column_end":24},"name":"required_ifs","qualname":"<Arg<'a, 'b>>::required_ifs","value":"fn (mut self, ifs: &[(&'a str, &'b str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows specifying that an argument is [required] based on multiple conditions. The\n conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid\n if one of the specified `arg`'s value equals it's corresponding `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":405601,"byte_end":405613,"line_start":1773,"line_end":1773,"column_start":12,"column_end":24},"name":"requires_all","qualname":"<Arg<'a, 'b>>::requires_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple arguments by names that are required when this one is present I.e. when\n using this argument, the following arguments *must* be present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":407547,"byte_end":407558,"line_start":1826,"line_end":1826,"column_start":12,"column_end":23},"name":"takes_value","qualname":"<Arg<'a, 'b>>::takes_value","value":"fn (self, tv: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument takes a value at run time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":408655,"byte_end":408675,"line_start":1862,"line_end":1862,"column_start":12,"column_end":32},"name":"hide_possible_values","qualname":"<Arg<'a, 'b>>::hide_possible_values","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies if the possible values of an argument should be displayed in the help text or\n not. Defaults to `false` (i.e. show possible values)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":409726,"byte_end":409744,"line_start":1896,"line_end":1896,"column_start":12,"column_end":30},"name":"hide_default_value","qualname":"<Arg<'a, 'b>>::hide_default_value","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies if the default value of an argument should be displayed in the help text or\n not. Defaults to `false` (i.e. show default value)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":411909,"byte_end":411914,"line_start":1951,"line_end":1951,"column_start":12,"column_end":17},"name":"index","qualname":"<Arg<'a, 'b>>::index","value":"fn (mut self, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the index of a positional argument **starting at** 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":420029,"byte_end":420037,"line_start":2147,"line_end":2147,"column_start":12,"column_end":20},"name":"multiple","qualname":"<Arg<'a, 'b>>::multiple","value":"fn (self, multi: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument may appear more than once. For flags, this results\n in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\n would count as three occurrences. For options there is a distinct difference in multiple\n occurrences vs multiple values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":422217,"byte_end":422233,"line_start":2200,"line_end":2200,"column_start":12,"column_end":28},"name":"value_terminator","qualname":"<Arg<'a, 'b>>::value_terminator","value":"fn (mut self, term: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a value that *stops* parsing multiple values of a give argument. By default when\n one sets [`multiple(true)`] on an argument, clap will continue parsing values for that\n argument until it reaches another valid argument, or one of the other more specific settings\n for multiple values is used (such as [`min_values`], [`max_values`] or\n [`number_of_values`]).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":424187,"byte_end":424193,"line_start":2249,"line_end":2249,"column_start":12,"column_end":18},"name":"global","qualname":"<Arg<'a, 'b>>::global","value":"fn (self, g: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that an argument can be matched to all child [`SubCommand`]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":425567,"byte_end":425579,"line_start":2291,"line_end":2291,"column_start":12,"column_end":24},"name":"empty_values","qualname":"<Arg<'a, 'b>>::empty_values","value":"fn (mut self, ev: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows an argument to accept explicitly empty values. An empty value must be specified at\n the command line with an explicit `\"\"`, or `''`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":427143,"byte_end":427149,"line_start":2343,"line_end":2343,"column_start":12,"column_end":18},"name":"hidden","qualname":"<Arg<'a, 'b>>::hidden","value":"fn (self, h: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":429006,"byte_end":429021,"line_start":2398,"line_end":2398,"column_start":12,"column_end":27},"name":"possible_values","qualname":"<Arg<'a, 'b>>::possible_values","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a list of possible values for this argument. At runtime, `clap` verifies that\n only one of the specified values was used, or fails with an error message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":431196,"byte_end":431210,"line_start":2462,"line_end":2462,"column_start":12,"column_end":26},"name":"possible_value","qualname":"<Arg<'a, 'b>>::possible_value","value":"fn (mut self, name: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\n that only one of the specified values was used, or fails with error message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":433103,"byte_end":433119,"line_start":2516,"line_end":2516,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<Arg<'a, 'b>>::case_insensitive","value":"fn (self, ci: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When used with [`Arg::possible_values`] it allows the argument value to pass validation even if\n the case differs from that of the specified `possible_value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":434199,"byte_end":434204,"line_start":2554,"line_end":2554,"column_start":12,"column_end":17},"name":"group","qualname":"<Arg<'a, 'b>>::group","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the name of the [`ArgGroup`] the argument belongs to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":435405,"byte_end":435411,"line_start":2594,"line_end":2594,"column_start":12,"column_end":18},"name":"groups","qualname":"<Arg<'a, 'b>>::groups","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":437104,"byte_end":437120,"line_start":2641,"line_end":2641,"column_start":12,"column_end":28},"name":"number_of_values","qualname":"<Arg<'a, 'b>>::number_of_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies how many values are required to satisfy this argument. For example, if you had a\n `-f <file>` argument where you wanted exactly 3 'files' you would set\n `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n 3 and only 3 values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":439063,"byte_end":439072,"line_start":2683,"line_end":2683,"column_start":12,"column_end":21},"name":"validator","qualname":"<Arg<'a, 'b>>::validator","value":"fn <F> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows one to perform a custom validation on the argument value. You provide a closure\n which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a\n message displayed to the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":440661,"byte_end":440673,"line_start":2721,"line_end":2721,"column_start":12,"column_end":24},"name":"validator_os","qualname":"<Arg<'a, 'b>>::validator_os","value":"fn <F> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Works identically to Validator but is intended to be used with values that could\n contain non UTF-8 formatted strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":442957,"byte_end":442967,"line_start":2785,"line_end":2785,"column_start":12,"column_end":22},"name":"max_values","qualname":"<Arg<'a, 'b>>::max_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the *maximum* number of values are for this argument. For example, if you had a\n `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and\n this argument would be satisfied if the user provided, 1, 2, or 3 values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":445217,"byte_end":445227,"line_start":2848,"line_end":2848,"column_start":12,"column_end":22},"name":"min_values","qualname":"<Arg<'a, 'b>>::min_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the *minimum* number of values for this argument. For example, if you had a\n `-f <file>` argument where you wanted at least 2 'files' you would set\n `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\n values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":447271,"byte_end":447284,"line_start":2899,"line_end":2899,"column_start":12,"column_end":25},"name":"use_delimiter","qualname":"<Arg<'a, 'b>>::use_delimiter","value":"fn (mut self, d: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies whether or not an argument should allow grouping of multiple values via a\n delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\n and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\n value delimiter for all arguments that accept values (options and positional arguments)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":450816,"byte_end":450833,"line_start":2986,"line_end":2986,"column_start":12,"column_end":29},"name":"require_delimiter","qualname":"<Arg<'a, 'b>>::require_delimiter","value":"fn (mut self, d: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that *multiple values* may only be set using the delimiter. This means if an\n if an option is encountered, and no delimiter is found, it automatically assumed that no\n additional values for that option follow. This is unlike the default, where it is generally\n assumed that more values will follow regardless of whether or not a delimiter is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":452156,"byte_end":452171,"line_start":3022,"line_end":3022,"column_start":12,"column_end":27},"name":"value_delimiter","qualname":"<Arg<'a, 'b>>::value_delimiter","value":"fn (mut self, d: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the separator to use when values are clumped together, defaults to `,` (comma).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":455000,"byte_end":455011,"line_start":3093,"line_end":3093,"column_start":12,"column_end":23},"name":"value_names","qualname":"<Arg<'a, 'b>>::value_names","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify multiple names for values of option arguments. These names are cosmetic only, used\n for help and usage strings only. The names are **not** used to access arguments. The values\n of the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n `two` `one` will be the first matched value, `two` will be the second).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":457275,"byte_end":457285,"line_start":3161,"line_end":3161,"column_start":12,"column_end":22},"name":"value_name","qualname":"<Arg<'a, 'b>>::value_name","value":"fn (mut self, name: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the name for value of [option] or [positional] arguments inside of help\n documentation. This name is cosmetic only, the name is **not** used to access arguments.\n This setting can be very helpful when describing the type of input the user should be\n using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\n use all capital letters for the value name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":460648,"byte_end":460661,"line_start":3237,"line_end":3237,"column_start":12,"column_end":25},"name":"default_value","qualname":"<Arg<'a, 'b>>::default_value","value":"fn (self, val: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the value of the argument when *not* specified at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":461040,"byte_end":461056,"line_start":3245,"line_end":3245,"column_start":12,"column_end":28},"name":"default_value_os","qualname":"<Arg<'a, 'b>>::default_value_os","value":"fn (mut self, val: &'a OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides a default value in the exact same manner as [`Arg::default_value`]\n only using [`OsStr`]s instead.\n [`Arg::default_value`]: ./struct.Arg.html#method.default_value\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":464836,"byte_end":464852,"line_start":3347,"line_end":3347,"column_start":12,"column_end":28},"name":"default_value_if","qualname":"<Arg<'a, 'b>>::default_value_if","value":"fn (self, arg: &'a str, val: Option<&'b str>, default: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to\n `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be\n present at runtime **and** have the value `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":465398,"byte_end":465417,"line_start":3359,"line_end":3359,"column_start":12,"column_end":31},"name":"default_value_if_os","qualname":"<Arg<'a, 'b>>::default_value_if_os","value":"fn (mut self, arg: &'a str, val: Option<&'b OsStr>, default: &'b OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides a conditional default value in the exact same manner as [`Arg::default_value_if`]\n only using [`OsStr`]s instead.\n [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":468883,"byte_end":468900,"line_start":3461,"line_end":3461,"column_start":12,"column_end":29},"name":"default_value_ifs","qualname":"<Arg<'a, 'b>>::default_value_ifs","value":"fn (mut self, ifs: &[(&'a str, Option<&'b str>, &'b str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\n The method takes a slice of tuples in the `(arg, Option<val>, default)` format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":469610,"byte_end":469630,"line_start":3477,"line_end":3477,"column_start":12,"column_end":32},"name":"default_value_ifs_os","qualname":"<Arg<'a, 'b>>::default_value_ifs_os","value":"fn (mut self, ifs: &[(&'a str, Option<&'b OsStr>, &'b OsStr)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides multiple conditional default values in the exact same manner as\n [`Arg::default_value_ifs`] only using [`OsStr`]s instead.\n [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":473304,"byte_end":473307,"line_start":3583,"line_end":3583,"column_start":12,"column_end":15},"name":"env","qualname":"<Arg<'a, 'b>>::env","value":"fn (self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that if the value is not passed in as an argument, that it should be retrieved\n from the environment, if available. If it is not present in the environment, then default\n rules will apply.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":473614,"byte_end":473620,"line_start":3590,"line_end":3590,"column_start":12,"column_end":18},"name":"env_os","qualname":"<Arg<'a, 'b>>::env_os","value":"fn (mut self, name: &'a OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that if the value is not passed in as an argument, that it should be retrieved\n from the environment if available in the exact same manner as [`Arg::env`] only using\n [`OsStr`]s instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":473833,"byte_end":473848,"line_start":3598,"line_end":3598,"column_start":12,"column_end":27},"name":"hide_env_values","qualname":"<Arg<'a, 'b>>::hide_env_values","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" @TODO @p2 @docs @release: write docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":475685,"byte_end":475699,"line_start":3651,"line_end":3651,"column_start":12,"column_end":26},"name":"next_line_help","qualname":"<Arg<'a, 'b>>::next_line_help","value":"fn (mut self, nlh: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set to `true` the help string will be displayed on the line after the argument and\n indented once. This can be helpful for arguments with very long or complex help messages.\n This can also be helpful for arguments with very long flag names, or many/long value names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":478257,"byte_end":478270,"line_start":3715,"line_end":3715,"column_start":12,"column_end":25},"name":"display_order","qualname":"<Arg<'a, 'b>>::display_order","value":"fn (mut self, ord: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows custom ordering of args within the help message. Args with a lower value will be\n displayed first in the help message. This is helpful when one would like to emphasise\n frequently used args, or prioritize those towards the top of the list. Duplicate values\n **are** allowed. Args with duplicate display orders will be displayed in alphabetical\n order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":479432,"byte_end":479435,"line_start":3739,"line_end":3739,"column_start":12,"column_end":15},"name":"raw","qualname":"<Arg<'a, 'b>>::raw","value":"fn (self, raw: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that all parameters passed after this should not be parsed\n individually, but rather passed in their entirety. It is worth noting\n that setting this requires all values to come after a `--` to indicate they\n should all be captured. For example:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":481516,"byte_end":481533,"line_start":3812,"line_end":3812,"column_start":12,"column_end":29},"name":"hidden_short_help","qualname":"<Arg<'a, 'b>>::hidden_short_help","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from short help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":483694,"byte_end":483710,"line_start":3889,"line_end":3889,"column_start":12,"column_end":28},"name":"hidden_long_help","qualname":"<Arg<'a, 'b>>::hidden_long_help","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from long help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484031,"byte_end":484037,"line_start":3899,"line_end":3899,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Arg<'a, 'b>>::is_set","value":"fn (&self, s: ArgSettings) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if one of the [`ArgSettings`] settings is set for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484229,"byte_end":484232,"line_start":3905,"line_end":3905,"column_start":12,"column_end":15},"name":"set","qualname":"<Arg<'a, 'b>>::set","value":"fn (mut self, s: ArgSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets one of the [`ArgSettings`] settings for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484439,"byte_end":484444,"line_start":3912,"line_end":3912,"column_start":12,"column_end":17},"name":"unset","qualname":"<Arg<'a, 'b>>::unset","value":"fn (mut self, s: ArgSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Unsets one of the [`ArgSettings`] settings for the argument\n [`ArgSettings`]: ./enum.ArgSettings.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484555,"byte_end":484559,"line_start":3918,"line_end":3918,"column_start":12,"column_end":16},"name":"setb","qualname":"<Arg<'a, 'b>>::setb","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484649,"byte_end":484655,"line_start":3923,"line_end":3923,"column_start":12,"column_end":18},"name":"unsetb","qualname":"<Arg<'a, 'b>>::unsetb","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1176},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485326,"byte_end":485332,"line_start":12,"line_end":12,"column_start":11,"column_end":17},"name":"AnyArg","qualname":"::args::any_arg::AnyArg","value":"AnyArg<'n, 'e>: std_fmt::Display","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485368,"byte_end":485372,"line_start":13,"line_end":13,"column_start":8,"column_end":12},"name":"name","qualname":"::args::any_arg::AnyArg::name","value":"fn (&self) -> &'n str","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485399,"byte_end":485408,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"overrides","qualname":"::args::any_arg::AnyArg::overrides","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485446,"byte_end":485453,"line_start":15,"line_end":15,"column_start":8,"column_end":15},"name":"aliases","qualname":"::args::any_arg::AnyArg::aliases","value":"fn (&self) -> Option<Vec<&'e str>>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485493,"byte_end":485501,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"requires","qualname":"::args::any_arg::AnyArg::requires","value":"fn (&self) -> Option<&[(Option<&'e str>, &'n str)]>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485558,"byte_end":485567,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"blacklist","qualname":"::args::any_arg::AnyArg::blacklist","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485605,"byte_end":485620,"line_start":18,"line_end":18,"column_start":8,"column_end":23},"name":"required_unless","qualname":"::args::any_arg::AnyArg::required_unless","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485658,"byte_end":485664,"line_start":19,"line_end":19,"column_start":8,"column_end":14},"name":"is_set","qualname":"::args::any_arg::AnyArg::is_set","value":"fn (&self, ArgSettings) -> bool","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485701,"byte_end":485704,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"set","qualname":"::args::any_arg::AnyArg::set","value":"fn (&mut self, ArgSettings) -> ()","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485737,"byte_end":485747,"line_start":21,"line_end":21,"column_start":8,"column_end":18},"name":"has_switch","qualname":"::args::any_arg::AnyArg::has_switch","value":"fn (&self) -> bool","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485771,"byte_end":485779,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"max_vals","qualname":"::args::any_arg::AnyArg::max_vals","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485810,"byte_end":485818,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"min_vals","qualname":"::args::any_arg::AnyArg::min_vals","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485849,"byte_end":485857,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"num_vals","qualname":"::args::any_arg::AnyArg::num_vals","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485888,"byte_end":485901,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"possible_vals","qualname":"::args::any_arg::AnyArg::possible_vals","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485939,"byte_end":485948,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"validator","qualname":"::args::any_arg::AnyArg::validator","value":"fn (&self) -> Option<&Rc<Fn(String) -> Result<(), String>>>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486013,"byte_end":486025,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"validator_os","qualname":"::args::any_arg::AnyArg::validator_os","value":"fn (&self) -> Option<&Rc<Fn(&OsStr) -> Result<(), OsString>>>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486092,"byte_end":486097,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"short","qualname":"::args::any_arg::AnyArg::short","value":"fn (&self) -> Option<char>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486129,"byte_end":486133,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"long","qualname":"::args::any_arg::AnyArg::long","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486168,"byte_end":486177,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"val_delim","qualname":"::args::any_arg::AnyArg::val_delim","value":"fn (&self) -> Option<char>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486209,"byte_end":486220,"line_start":31,"line_end":31,"column_start":8,"column_end":19},"name":"takes_value","qualname":"::args::any_arg::AnyArg::takes_value","value":"fn (&self) -> bool","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486244,"byte_end":486253,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"val_names","qualname":"::args::any_arg::AnyArg::val_names","value":"fn (&self) -> Option<&VecMap<&'e str>>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486297,"byte_end":486301,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"help","qualname":"::args::any_arg::AnyArg::help","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486336,"byte_end":486345,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"long_help","qualname":"::args::any_arg::AnyArg::long_help","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486380,"byte_end":486391,"line_start":35,"line_end":35,"column_start":8,"column_end":19},"name":"default_val","qualname":"::args::any_arg::AnyArg::default_val","value":"fn (&self) -> Option<&'e OsStr>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486428,"byte_end":486444,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"default_vals_ifs","qualname":"::args::any_arg::AnyArg::default_vals_ifs","value":"fn (&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486524,"byte_end":486527,"line_start":37,"line_end":37,"column_start":8,"column_end":11},"name":"env","qualname":"::args::any_arg::AnyArg::env","value":"fn <'s> (&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486595,"byte_end":486609,"line_start":38,"line_end":38,"column_start":8,"column_end":22},"name":"longest_filter","qualname":"::args::any_arg::AnyArg::longest_filter","value":"fn (&self) -> bool","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":486633,"byte_end":486647,"line_start":39,"line_end":39,"column_start":8,"column_end":22},"name":"val_terminator","qualname":"::args::any_arg::AnyArg::val_terminator","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1176},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3228},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491082,"byte_end":491092,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"ArgMatches","qualname":"::args::arg_matches::ArgMatches","value":"ArgMatches { args, subcommand, usage }","parent":null,"children":[{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783}],"decl_id":null,"docs":" Used to get information about the arguments that where supplied to the program at runtime by\n the user. New instances of this struct are obtained by using the [`App::get_matches`] family of\n methods.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1779},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491122,"byte_end":491126,"line_start":62,"line_end":62,"column_start":24,"column_end":28},"name":"args","qualname":"::args::arg_matches::ArgMatches::args","value":"std::collections::HashMap<&'a str, args::matched_arg::MatchedArg>","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1781},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491181,"byte_end":491191,"line_start":63,"line_end":63,"column_start":24,"column_end":34},"name":"subcommand","qualname":"::args::arg_matches::ArgMatches::subcommand","value":"std::option::Option<std::boxed::Box<args::subcommand::SubCommand<'a>>>","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1783},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491245,"byte_end":491250,"line_start":64,"line_end":64,"column_start":24,"column_end":29},"name":"usage","qualname":"::args::arg_matches::ArgMatches::usage","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491521,"byte_end":491524,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgMatches<'a>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":492747,"byte_end":492755,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"value_of","qualname":"<ArgMatches<'a>>::value_of","value":"fn <S> (&self, name: S) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes\n an additional value at runtime). If the option wasn't present at runtime\n it returns `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494181,"byte_end":494195,"line_start":144,"line_end":144,"column_start":12,"column_end":26},"name":"value_of_lossy","qualname":"<ArgMatches<'a>>::value_of_lossy","value":"fn <S> (&'a self, name: S) -> Option<Cow<'a, str>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the lossy value of a specific argument. If the argument wasn't present at runtime\n it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\n invalid points will be replaced with `\\u{FFFD}`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":495925,"byte_end":495936,"line_start":180,"line_end":180,"column_start":12,"column_end":23},"name":"value_of_os","qualname":"<ArgMatches<'a>>::value_of_os","value":"fn <S> (&self, name: S) -> Option<&OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Gets the OS version of a string value of a specific argument. If the option wasn't present\n at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\n regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in\n Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument\n value may contain invalid UTF-8 code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":497090,"byte_end":497099,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"values_of","qualname":"<ArgMatches<'a>>::values_of","value":"fn <S> (&'a self, name: S) -> Option<Values<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument\n (i.e. an argument that takes multiple values at runtime). If the option wasn't present at\n runtime it returns `None`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":498652,"byte_end":498667,"line_start":246,"line_end":246,"column_start":12,"column_end":27},"name":"values_of_lossy","qualname":"<ArgMatches<'a>>::values_of_lossy","value":"fn <S> (&'a self, name: S) -> Option<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the lossy values of a specific argument. If the option wasn't present at runtime\n it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points,\n those invalid points will be replaced with `\\u{FFFD}`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":500696,"byte_end":500708,"line_start":289,"line_end":289,"column_start":12,"column_end":24},"name":"values_of_os","qualname":"<ArgMatches<'a>>::values_of_os","value":"fn <S> (&'a self, name: S) -> Option<OsValues<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a\n specific argument. If the option wasn't present at runtime it returns `None`. An OS value\n on Unix-like systems is any series of bytes, regardless of whether or not they contain\n valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\n filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":501540,"byte_end":501550,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"is_present","qualname":"<ArgMatches<'a>>::is_present","value":"fn <S> (&self, name: S) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if an argument was present at runtime, otherwise `false`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":503088,"byte_end":503102,"line_start":363,"line_end":363,"column_start":12,"column_end":26},"name":"occurrences_of","qualname":"<ArgMatches<'a>>::occurrences_of","value":"fn <S> (&self, name: S) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of times an argument was used at runtime. If an argument isn't present\n it will return `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":508653,"byte_end":508661,"line_start":497,"line_end":497,"column_start":12,"column_end":20},"name":"index_of","qualname":"<ArgMatches<'a>>::index_of","value":"fn <S> (&self, name: S) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the starting index of the argument in respect to all other arguments. Indices are\n similar to argv indices, but are not exactly 1:1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":512271,"byte_end":512281,"line_start":579,"line_end":579,"column_start":12,"column_end":22},"name":"indices_of","qualname":"<ArgMatches<'a>>::indices_of","value":"fn <S> (&'a self, name: S) -> Option<Indices<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets all indices of the argument in respect to all other arguments. Indices are\n similar to argv indices, but are not exactly 1:1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":513945,"byte_end":513963,"line_start":621,"line_end":621,"column_start":12,"column_end":30},"name":"subcommand_matches","qualname":"<ArgMatches<'a>>::subcommand_matches","value":"fn <S> (&self, name: S) -> Option<&ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\n as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if\n the subcommand wasn't present at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":516917,"byte_end":516932,"line_start":688,"line_end":688,"column_start":12,"column_end":27},"name":"subcommand_name","qualname":"<ArgMatches<'a>>::subcommand_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\n as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know\n which subcommand was actually used. This method returns the name of the subcommand that was\n used at runtime, or `None` if one wasn't.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":519128,"byte_end":519138,"line_start":739,"line_end":739,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<ArgMatches<'a>>::subcommand","value":"fn (&self) -> (&str, Option<&ArgMatches<'a>>)","parent":null,"children":[],"decl_id":null,"docs":" This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`]\n by returning a tuple with both pieces of information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":519769,"byte_end":519774,"line_start":759,"line_end":759,"column_start":12,"column_end":17},"name":"usage","qualname":"<ArgMatches<'a>>::usage","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3238},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":520792,"byte_end":520798,"line_start":791,"line_end":791,"column_start":12,"column_end":18},"name":"Values","qualname":"::args::arg_matches::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":1791}],"decl_id":null,"docs":" An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`]\n method.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":520741,"byte_end":520780,"line_start":790,"line_end":790,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3244},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522576,"byte_end":522584,"line_start":843,"line_end":843,"column_start":12,"column_end":20},"name":"OsValues","qualname":"::args::arg_matches::OsValues","value":"OsValues {  }","parent":null,"children":[{"krate":0,"index":1797}],"decl_id":null,"docs":" An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`]\n method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike\n [`Values`].","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522525,"byte_end":522564,"line_start":842,"line_end":842,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3250},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524126,"byte_end":524133,"line_start":895,"line_end":895,"column_start":12,"column_end":19},"name":"Indices","qualname":"::args::arg_matches::Indices","value":"Indices {  }","parent":null,"children":[{"krate":0,"index":1803}],"decl_id":null,"docs":" An iterator for getting multiple indices out of an argument via the [`ArgMatches::indices_of`]\n method.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524075,"byte_end":524114,"line_start":894,"line_end":894,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1450},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526466,"byte_end":526476,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"ArgMatcher","qualname":"::args::arg_matcher::ArgMatcher","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526415,"byte_end":526454,"line_start":14,"line_end":14,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526644,"byte_end":526647,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgMatcher<'a>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526696,"byte_end":526717,"line_start":24,"line_end":24,"column_start":12,"column_end":33},"name":"process_arg_overrides","qualname":"<ArgMatcher<'a>>::process_arg_overrides","value":"fn <'b> (&mut self, a: Option<&AnyArg<'a, 'b>>, overrides: &mut Vec<(&'b str, &'a str)>, required: &mut Vec<&'a str>, check_all: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":528266,"byte_end":528287,"line_start":56,"line_end":56,"column_start":12,"column_end":33},"name":"handle_self_overrides","qualname":"<ArgMatcher<'a>>::handle_self_overrides","value":"fn <'b> (&mut self, a: Option<&AnyArg<'a, 'b>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529237,"byte_end":529247,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"is_present","qualname":"<ArgMatcher<'a>>::is_present","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529327,"byte_end":529344,"line_start":83,"line_end":83,"column_start":12,"column_end":29},"name":"propagate_globals","qualname":"<ArgMatcher<'a>>::propagate_globals","value":"fn (&mut self, global_arg_vec: &[&'a str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531117,"byte_end":531124,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ArgMatcher<'a>>::get_mut","value":"fn (&mut self, arg: &str) -> Option<&mut MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531215,"byte_end":531218,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"get","qualname":"<ArgMatcher<'a>>::get","value":"fn (&self, arg: &str) -> Option<&MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531297,"byte_end":531303,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"remove","qualname":"<ArgMatcher<'a>>::remove","value":"fn (&mut self, arg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531367,"byte_end":531377,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"remove_all","qualname":"<ArgMatcher<'a>>::remove_all","value":"fn (&mut self, args: &[&str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531498,"byte_end":531504,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"insert","qualname":"<ArgMatcher<'a>>::insert","value":"fn (&mut self, name: &'a str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531592,"byte_end":531600,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"contains","qualname":"<ArgMatcher<'a>>::contains","value":"fn (&self, arg: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531673,"byte_end":531681,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ArgMatcher<'a>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531736,"byte_end":531741,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"usage","qualname":"<ArgMatcher<'a>>::usage","value":"fn (&mut self, usage: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531812,"byte_end":531821,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"arg_names","qualname":"<ArgMatcher<'a>>::arg_names","value":"fn (&'a self) -> Vec<&'a str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531911,"byte_end":531916,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"entry","qualname":"<ArgMatcher<'a>>::entry","value":"fn (&mut self, arg: &'a str) -> Entry<&'a str, MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532011,"byte_end":532021,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<ArgMatcher<'a>>::subcommand","value":"fn (&mut self, sc: SubCommand<'a>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532109,"byte_end":532124,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"subcommand_name","qualname":"<ArgMatcher<'a>>::subcommand_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532189,"byte_end":532193,"line_start":153,"line_end":153,"column_start":12,"column_end":16},"name":"iter","qualname":"<ArgMatcher<'a>>::iter","value":"fn (&self) -> Iter<&str, MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532262,"byte_end":532279,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"inc_occurrence_of","qualname":"<ArgMatcher<'a>>::inc_occurrence_of","value":"fn (&mut self, arg: &'a str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532584,"byte_end":532602,"line_start":165,"line_end":165,"column_start":12,"column_end":30},"name":"inc_occurrences_of","qualname":"<ArgMatcher<'a>>::inc_occurrences_of","value":"fn (&mut self, args: &[&'a str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532798,"byte_end":532808,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"add_val_to","qualname":"<ArgMatcher<'a>>::add_val_to","value":"fn (&mut self, arg: &'a str, val: &OsStr) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":533081,"byte_end":533093,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"add_index_to","qualname":"<ArgMatcher<'a>>::add_index_to","value":"fn (&mut self, arg: &'a str, idx: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":533346,"byte_end":533361,"line_start":190,"line_end":190,"column_start":12,"column_end":27},"name":"needs_more_vals","qualname":"<ArgMatcher<'a>>::needs_more_vals","value":"fn <'b, A> (&self, o: &A) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3256},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":535284,"byte_end":535294,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"SubCommand","qualname":"::args::subcommand::SubCommand","value":"SubCommand { name, matches }","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1811}],"decl_id":null,"docs":" The abstract representation of a command line subcommand.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1809},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":535324,"byte_end":535328,"line_start":32,"line_end":32,"column_start":24,"column_end":28},"name":"name","qualname":"::args::subcommand::SubCommand::name","value":"std::string::String","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1811},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":535361,"byte_end":535368,"line_start":33,"line_end":33,"column_start":24,"column_end":31},"name":"matches","qualname":"::args::subcommand::SubCommand::matches","value":"args::arg_matches::ArgMatches<'a>","parent":{"krate":0,"index":3256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":535813,"byte_end":535822,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"with_name","qualname":"<SubCommand<'a>>::with_name","value":"fn <'b> (name: &str) -> App<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of a subcommand requiring a name. The name will be displayed\n to the user when they print version or help and usage information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3266},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":536951,"byte_end":536962,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"FlagBuilder","qualname":"::args::arg_builder::flag::FlagBuilder","value":"FlagBuilder { b, s }","parent":null,"children":[{"krate":0,"index":1821},{"krate":0,"index":1823}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":536999,"byte_end":537000,"line_start":20,"line_end":20,"column_start":9,"column_end":10},"name":"b","qualname":"::args::arg_builder::flag::FlagBuilder::b","value":"args::arg_builder::base::Base<'n, 'e>","parent":{"krate":0,"index":3266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537024,"byte_end":537025,"line_start":21,"line_end":21,"column_start":9,"column_end":10},"name":"s","qualname":"::args::arg_builder::flag::FlagBuilder::s","value":"args::arg_builder::switched::Switched<'e>","parent":{"krate":0,"index":3266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537090,"byte_end":537093,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<FlagBuilder<'n, 'e>>::new","value":"fn (name: &'n str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3280},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":541900,"byte_end":541910,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"PosBuilder","qualname":"::args::arg_builder::positional::PosBuilder","value":"PosBuilder { b, v, index }","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1843},{"krate":0,"index":1845}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":541808,"byte_end":541847,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":541947,"byte_end":541948,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"b","qualname":"::args::arg_builder::positional::PosBuilder::b","value":"args::arg_builder::base::Base<'n, 'e>","parent":{"krate":0,"index":3280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1843},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":541972,"byte_end":541973,"line_start":23,"line_end":23,"column_start":9,"column_end":10},"name":"v","qualname":"::args::arg_builder::positional::PosBuilder::v","value":"args::arg_builder::valued::Valued<'n, 'e>","parent":{"krate":0,"index":3280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":541999,"byte_end":542004,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"name":"index","qualname":"::args::arg_builder::positional::PosBuilder::index","value":"u64","parent":{"krate":0,"index":3280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":542059,"byte_end":542062,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<PosBuilder<'n, 'e>>::new","value":"fn (name: &'n str, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":542236,"byte_end":542248,"line_start":36,"line_end":36,"column_start":12,"column_end":24},"name":"from_arg_ref","qualname":"<PosBuilder<'n, 'e>>::from_arg_ref","value":"fn (a: &Arg<'n, 'e>, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":542649,"byte_end":542657,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"from_arg","qualname":"<PosBuilder<'n, 'e>>::from_arg","value":"fn (mut a: Arg<'n, 'e>, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":543087,"byte_end":543099,"line_start":63,"line_end":63,"column_start":12,"column_end":24},"name":"multiple_str","qualname":"<PosBuilder<'n, 'e>>::multiple_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":543384,"byte_end":543400,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"name_no_brackets","qualname":"<PosBuilder<'n, 'e>>::name_no_brackets","value":"fn (&self) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3290},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549194,"byte_end":549204,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"OptBuilder","qualname":"::args::arg_builder::option::OptBuilder","value":"OptBuilder { b, s, v }","parent":null,"children":[{"krate":0,"index":1861},{"krate":0,"index":1863},{"krate":0,"index":1865}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549102,"byte_end":549141,"line_start":13,"line_end":13,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1861},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549241,"byte_end":549242,"line_start":20,"line_end":20,"column_start":9,"column_end":10},"name":"b","qualname":"::args::arg_builder::option::OptBuilder::b","value":"args::arg_builder::base::Base<'n, 'e>","parent":{"krate":0,"index":3290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1863},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549266,"byte_end":549267,"line_start":21,"line_end":21,"column_start":9,"column_end":10},"name":"s","qualname":"::args::arg_builder::option::OptBuilder::s","value":"args::arg_builder::switched::Switched<'e>","parent":{"krate":0,"index":3290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1865},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549291,"byte_end":549292,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"v","qualname":"::args::arg_builder::option::OptBuilder::v","value":"args::arg_builder::valued::Valued<'n, 'e>","parent":{"krate":0,"index":3290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549358,"byte_end":549361,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<OptBuilder<'n, 'e>>::new","value":"fn (name: &'n str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3300},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556588,"byte_end":556592,"line_start":4,"line_end":4,"column_start":12,"column_end":16},"name":"Base","qualname":"::args::arg_builder::base::Base","value":"Base { name, help, long_help, blacklist, settings, r_unless, overrides, groups, requires }","parent":null,"children":[{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1883},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1879},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556629,"byte_end":556633,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"name","qualname":"::args::arg_builder::base::Base::name","value":"&'a str","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1881},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556652,"byte_end":556656,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"name":"help","qualname":"::args::arg_builder::base::Base::help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1883},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556683,"byte_end":556692,"line_start":10,"line_end":10,"column_start":9,"column_end":18},"name":"long_help","qualname":"::args::arg_builder::base::Base::long_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556719,"byte_end":556728,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"blacklist","qualname":"::args::arg_builder::base::Base::blacklist","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1887},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556760,"byte_end":556768,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"name":"settings","qualname":"::args::arg_builder::base::Base::settings","value":"args::settings::ArgFlags","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1889},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556788,"byte_end":556796,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"name":"r_unless","qualname":"::args::arg_builder::base::Base::r_unless","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1891},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556828,"byte_end":556837,"line_start":14,"line_end":14,"column_start":9,"column_end":18},"name":"overrides","qualname":"::args::arg_builder::base::Base::overrides","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1893},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556869,"byte_end":556875,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"groups","qualname":"::args::arg_builder::base::Base::groups","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1895},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556907,"byte_end":556915,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"requires","qualname":"::args::arg_builder::base::Base::requires","value":"std::option::Option<std::vec::Vec<(std::option::Option<&'b str>, &'a str)>>","parent":{"krate":0,"index":3300},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557000,"byte_end":557003,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<Base<'n, 'e>>::new","value":"fn (name: &'n str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557129,"byte_end":557132,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"set","qualname":"<Base<'n, 'e>>::set","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1926},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557197,"byte_end":557202,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"unset","qualname":"<Base<'n, 'e>>::unset","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557269,"byte_end":557275,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Base<'n, 'e>>::is_set","value":"fn (&self, s: ArgSettings) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3314},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557722,"byte_end":557728,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Valued","qualname":"::args::arg_builder::valued::Valued","value":"Valued { possible_vals, val_names, num_vals, max_vals, min_vals, validator, validator_os, val_delim, default_val, default_vals_ifs, env, terminator }","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1935}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557654,"byte_end":557693,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1913},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557765,"byte_end":557778,"line_start":14,"line_end":14,"column_start":9,"column_end":22},"name":"possible_vals","qualname":"::args::arg_builder::valued::Valued::possible_vals","value":"std::option::Option<std::vec::Vec<&'b str>>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1915},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557810,"byte_end":557819,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"val_names","qualname":"::args::arg_builder::valued::Valued::val_names","value":"std::option::Option<map::vec_map::VecMap<&'b str>>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557854,"byte_end":557862,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"num_vals","qualname":"::args::arg_builder::valued::Valued::num_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557885,"byte_end":557893,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"max_vals","qualname":"::args::arg_builder::valued::Valued::max_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557916,"byte_end":557924,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"min_vals","qualname":"::args::arg_builder::valued::Valued::min_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":557947,"byte_end":557956,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"validator","qualname":"::args::arg_builder::valued::Valued::validator","value":"std::option::Option<std::rc::Rc<(dyn std::ops::Fn(std::string::String) -> std::result::Result<(), std::string::String> + 'static)>>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558012,"byte_end":558024,"line_start":20,"line_end":20,"column_start":9,"column_end":21},"name":"validator_os","qualname":"::args::arg_builder::valued::Valued::validator_os","value":"std::option::Option<std::rc::Rc<(dyn for<'r> std::ops::Fn(&'r std::ffi::OsStr) -> std::result::Result<(), std::ffi::OsString> + 'static)>>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558082,"byte_end":558091,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"name":"val_delim","qualname":"::args::arg_builder::valued::Valued::val_delim","value":"std::option::Option<char>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558115,"byte_end":558126,"line_start":22,"line_end":22,"column_start":9,"column_end":20},"name":"default_val","qualname":"::args::arg_builder::valued::Valued::default_val","value":"std::option::Option<&'b std::ffi::OsStr>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1931},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558155,"byte_end":558171,"line_start":23,"line_end":23,"column_start":9,"column_end":25},"name":"default_vals_ifs","qualname":"::args::arg_builder::valued::Valued::default_vals_ifs","value":"std::option::Option<map::vec_map::VecMap<(&'a str, std::option::Option<&'b std::ffi::OsStr>, &'b std::ffi::OsStr)>>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1933},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558238,"byte_end":558241,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"env","qualname":"::args::arg_builder::valued::Valued::env","value":"std::option::Option<(&'a std::ffi::OsStr, std::option::Option<std::ffi::OsString>)>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1935},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558290,"byte_end":558300,"line_start":25,"line_end":25,"column_start":9,"column_end":19},"name":"terminator","qualname":"::args::arg_builder::valued::Valued::terminator","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558824,"byte_end":558831,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"fill_in","qualname":"<Valued<'n, 'e>>::fill_in","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3320},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559360,"byte_end":559368,"line_start":4,"line_end":4,"column_start":12,"column_end":20},"name":"Switched","qualname":"::args::arg_builder::switched::Switched","value":"Switched { short, long, aliases, disp_ord, unified_ord }","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1943},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559383,"byte_end":559388,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"short","qualname":"::args::arg_builder::switched::Switched::short","value":"std::option::Option<char>","parent":{"krate":0,"index":3320},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1945},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559412,"byte_end":559416,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"name":"long","qualname":"::args::arg_builder::switched::Switched::long","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3320},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559443,"byte_end":559450,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"name":"aliases","qualname":"::args::arg_builder::switched::Switched::aliases","value":"std::option::Option<std::vec::Vec<(&'b str, bool)>>","parent":{"krate":0,"index":3320},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559509,"byte_end":559517,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"name":"disp_ord","qualname":"::args::arg_builder::switched::Switched::disp_ord","value":"usize","parent":{"krate":0,"index":3320},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1951},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559534,"byte_end":559545,"line_start":9,"line_end":9,"column_start":9,"column_end":20},"name":"unified_ord","qualname":"::args::arg_builder::switched::Switched::unified_ord","value":"usize","parent":{"krate":0,"index":3320},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3326},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560275,"byte_end":560285,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"MatchedArg","qualname":"::args::matched_arg::MatchedArg","value":"MatchedArg { occurs, indices, vals }","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1957},{"krate":0,"index":1959}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1955},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560311,"byte_end":560317,"line_start":7,"line_end":7,"column_start":24,"column_end":30},"name":"occurs","qualname":"::args::matched_arg::MatchedArg::occurs","value":"u64","parent":{"krate":0,"index":3326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1957},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560347,"byte_end":560354,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"name":"indices","qualname":"::args::matched_arg::MatchedArg::indices","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560391,"byte_end":560395,"line_start":9,"line_end":9,"column_start":24,"column_end":28},"name":"vals","qualname":"::args::matched_arg::MatchedArg::vals","value":"std::vec::Vec<std::ffi::OsString>","parent":{"krate":0,"index":3326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560627,"byte_end":560630,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<MatchedArg>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3336},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564668,"byte_end":564676,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"ArgGroup","qualname":"::args::group::ArgGroup","value":"ArgGroup { name, args, required, requires, conflicts, multiple }","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1973}],"decl_id":null,"docs":" `ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these\n arguments\". By placing arguments in a logical group, you can create easier requirement and\n exclusion rules instead of having to list each argument individually, or when you want a rule\n to apply \"any but not all\" arguments.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1963},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564706,"byte_end":564710,"line_start":82,"line_end":82,"column_start":24,"column_end":28},"name":"name","qualname":"::args::group::ArgGroup::name","value":"&'a str","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1965},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564744,"byte_end":564748,"line_start":83,"line_end":83,"column_start":24,"column_end":28},"name":"args","qualname":"::args::group::ArgGroup::args","value":"std::vec::Vec<&'a str>","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1967},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564787,"byte_end":564795,"line_start":84,"line_end":84,"column_start":24,"column_end":32},"name":"required","qualname":"::args::group::ArgGroup::required","value":"bool","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1969},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564826,"byte_end":564834,"line_start":85,"line_end":85,"column_start":24,"column_end":32},"name":"requires","qualname":"::args::group::ArgGroup::requires","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1971},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564881,"byte_end":564890,"line_start":86,"line_end":86,"column_start":24,"column_end":33},"name":"conflicts","qualname":"::args::group::ArgGroup::conflicts","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1973},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564937,"byte_end":564945,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"name":"multiple","qualname":"::args::group::ArgGroup::multiple","value":"bool","parent":{"krate":0,"index":3336},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":565337,"byte_end":565346,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"with_name","qualname":"<ArgGroup<'a>>::with_name","value":"fn (n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\n get values from the group or refer to the group inside of conflict and requirement rules.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":566832,"byte_end":566835,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"arg","qualname":"<ArgGroup<'a>>::arg","value":"fn (mut self, n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [argument] to this group by name","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567802,"byte_end":567806,"line_start":180,"line_end":180,"column_start":12,"column_end":16},"name":"args","qualname":"<ArgGroup<'a>>::args","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] to this group by name","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":569548,"byte_end":569556,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"multiple","qualname":"<ArgGroup<'a>>::multiple","value":"fn (mut self, m: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":571308,"byte_end":571316,"line_start":266,"line_end":266,"column_start":12,"column_end":20},"name":"required","qualname":"<ArgGroup<'a>>::required","value":"fn (mut self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the group as required or not. A required group will be displayed in the usage string\n of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states\n that one argument from this group *must* be present at runtime (unless\n conflicting with another argument).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":572734,"byte_end":572742,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"requires","qualname":"<ArgGroup<'a>>::requires","value":"fn (mut self, n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the requirement rules of this group. This is not to be confused with a\n [required group]. Requirement rules function just like [argument requirement rules], you\n can name other arguments or groups that must be present when any one of the arguments from\n this group is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":574406,"byte_end":574418,"line_start":342,"line_end":342,"column_start":12,"column_end":24},"name":"requires_all","qualname":"<ArgGroup<'a>>::requires_all","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the requirement rules of this group. This is not to be confused with a\n [required group]. Requirement rules function just like [argument requirement rules], you\n can name other arguments or groups that must be present when one of the arguments from this\n group is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":575765,"byte_end":575779,"line_start":376,"line_end":376,"column_start":12,"column_end":26},"name":"conflicts_with","qualname":"<ArgGroup<'a>>::conflicts_with","value":"fn (mut self, n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\n [argument exclusion rules], you can name other arguments or groups that must *not* be\n present when one of the arguments from this group are used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":577304,"byte_end":577322,"line_start":415,"line_end":415,"column_start":12,"column_end":30},"name":"conflicts_with_all","qualname":"<ArgGroup<'a>>::conflicts_with_all","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusion rules of this group. Exclusion rules function just like\n [argument exclusion rules], you can name other arguments or groups that must *not* be\n present when one of the arguments from this group are used.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3690},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":584433,"byte_end":584441,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"ArgFlags","qualname":"::args::settings::ArgFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":584422,"byte_end":584449,"line_start":33,"line_end":33,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2042},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":584478,"byte_end":584481,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1989},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":585983,"byte_end":585991,"line_start":75,"line_end":75,"column_start":5,"column_end":13},"name":"Required","qualname":"::args::settings::ArgSettings::Required","value":"ArgSettings::Required","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument must be used\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1991},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586069,"byte_end":586077,"line_start":77,"line_end":77,"column_start":5,"column_end":13},"name":"Multiple","qualname":"::args::settings::ArgSettings::Multiple","value":"ArgSettings::Multiple","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument may be used multiple times such as `--flag --flag`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1993},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586146,"byte_end":586157,"line_start":79,"line_end":79,"column_start":5,"column_end":16},"name":"EmptyValues","qualname":"::args::settings::ArgSettings::EmptyValues","value":"ArgSettings::EmptyValues","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument allows empty values such as `--option \"\"`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1995},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586293,"byte_end":586299,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"Global","qualname":"::args::settings::ArgSettings::Global","value":"ArgSettings::Global","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument should be propagated down through all child [`SubCommands`]\n [`SubCommand`]: ./struct.SubCommand.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586363,"byte_end":586369,"line_start":84,"line_end":84,"column_start":5,"column_end":11},"name":"Hidden","qualname":"::args::settings::ArgSettings::Hidden","value":"ArgSettings::Hidden","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1999},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586440,"byte_end":586450,"line_start":86,"line_end":86,"column_start":5,"column_end":15},"name":"TakesValue","qualname":"::args::settings::ArgSettings::TakesValue","value":"ArgSettings::TakesValue","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument accepts a value, such as `--option <value>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2001},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586535,"byte_end":586552,"line_start":88,"line_end":88,"column_start":5,"column_end":22},"name":"UseValueDelimiter","qualname":"::args::settings::ArgSettings::UseValueDelimiter","value":"ArgSettings::UseValueDelimiter","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Determines if the argument allows values to be grouped via a delimiter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2003},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586618,"byte_end":586630,"line_start":90,"line_end":90,"column_start":5,"column_end":17},"name":"NextLineHelp","qualname":"::args::settings::ArgSettings::NextLineHelp","value":"ArgSettings::NextLineHelp","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Prints the help text on the line after the argument\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2005},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586706,"byte_end":586722,"line_start":92,"line_end":92,"column_start":5,"column_end":21},"name":"RequireDelimiter","qualname":"::args::settings::ArgSettings::RequireDelimiter","value":"ArgSettings::RequireDelimiter","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Requires the use of a value delimiter for all multiple values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2007},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586783,"byte_end":586801,"line_start":94,"line_end":94,"column_start":5,"column_end":23},"name":"HidePossibleValues","qualname":"::args::settings::ArgSettings::HidePossibleValues","value":"ArgSettings::HidePossibleValues","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Hides the possible values from the help string\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2009},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586849,"byte_end":586867,"line_start":96,"line_end":96,"column_start":5,"column_end":23},"name":"AllowLeadingHyphen","qualname":"::args::settings::ArgSettings::AllowLeadingHyphen","value":"ArgSettings::AllowLeadingHyphen","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Allows vals that start with a '-'\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2011},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":586923,"byte_end":586936,"line_start":98,"line_end":98,"column_start":5,"column_end":18},"name":"RequireEquals","qualname":"::args::settings::ArgSettings::RequireEquals","value":"ArgSettings::RequireEquals","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Require options use `--option=val` syntax\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2013},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587055,"byte_end":587059,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Last","qualname":"::args::settings::ArgSettings::Last","value":"ArgSettings::Last","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Specifies that the arg is the last positional argument and may be accessed early via `--`\n syntax\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2015},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587118,"byte_end":587134,"line_start":103,"line_end":103,"column_start":5,"column_end":21},"name":"HideDefaultValue","qualname":"::args::settings::ArgSettings::HideDefaultValue","value":"ArgSettings::HideDefaultValue","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Hides the default value from the help string\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2017},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587194,"byte_end":587209,"line_start":105,"line_end":105,"column_start":5,"column_end":20},"name":"CaseInsensitive","qualname":"::args::settings::ArgSettings::CaseInsensitive","value":"ArgSettings::CaseInsensitive","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Makes `Arg::possible_values` case insensitive\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2019},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587260,"byte_end":587273,"line_start":107,"line_end":107,"column_start":5,"column_end":18},"name":"HideEnvValues","qualname":"::args::settings::ArgSettings::HideEnvValues","value":"ArgSettings::HideEnvValues","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" Hides ENV values in the help message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2021},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587343,"byte_end":587358,"line_start":109,"line_end":109,"column_start":5,"column_end":20},"name":"HiddenShortHelp","qualname":"::args::settings::ArgSettings::HiddenShortHelp","value":"ArgSettings::HiddenShortHelp","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in short help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587427,"byte_end":587441,"line_start":111,"line_end":111,"column_start":5,"column_end":19},"name":"HiddenLongHelp","qualname":"::args::settings::ArgSettings::HiddenLongHelp","value":"ArgSettings::HiddenLongHelp","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in long help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2025},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587462,"byte_end":587479,"line_start":112,"line_end":112,"column_start":20,"column_end":37},"name":"RequiredUnlessAll","qualname":"::args::settings::ArgSettings::RequiredUnlessAll","value":"ArgSettings::RequiredUnlessAll","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2027},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587500,"byte_end":587520,"line_start":113,"line_end":113,"column_start":20,"column_end":40},"name":"ValueDelimiterNotSet","qualname":"::args::settings::ArgSettings::ValueDelimiterNotSet","value":"ArgSettings::ValueDelimiterNotSet","parent":{"krate":0,"index":3708},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3708},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":585931,"byte_end":585942,"line_start":73,"line_end":73,"column_start":10,"column_end":21},"name":"ArgSettings","qualname":"::args::settings::ArgSettings","value":"ArgSettings::{Required, Multiple, EmptyValues, Global, Hidden, TakesValue, UseValueDelimiter, NextLineHelp, RequireDelimiter, HidePossibleValues, AllowLeadingHyphen, RequireEquals, Last, HideDefaultValue, CaseInsensitive, HideEnvValues, HiddenShortHelp, HiddenLongHelp, RequiredUnlessAll, ValueDelimiterNotSet}","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2005},{"krate":0,"index":2007},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2013},{"krate":0,"index":2015},{"krate":0,"index":2017},{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2025},{"krate":0,"index":2027}],"decl_id":null,"docs":" Various settings that apply to arguments and may be set, unset, and checked via getter/setter\n methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":585922,"byte_end":587523,"line_start":73,"line_end":114,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2057},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":640364,"byte_end":640368,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Auto","qualname":"::fmt::ColorWhen::Auto","value":"ColorWhen::Auto","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":640374,"byte_end":640380,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Always","qualname":"::fmt::ColorWhen::Always","value":"ColorWhen::Always","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2061},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":640386,"byte_end":640391,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Never","qualname":"::fmt::ColorWhen::Never","value":"ColorWhen::Never","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3740},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":640348,"byte_end":640357,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"name":"ColorWhen","qualname":"::fmt::ColorWhen","value":"ColorWhen::{Auto, Always, Never}","parent":null,"children":[{"krate":0,"index":2057},{"krate":0,"index":2059},{"krate":0,"index":2061}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":640339,"byte_end":640394,"line_start":14,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642735,"byte_end":642740,"line_start":121,"line_end":121,"column_start":5,"column_end":10},"name":"Error","qualname":"::fmt::Format::Error","value":"Format::Error(T)","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Defines the style used for errors, defaults to Red\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2069},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642813,"byte_end":642820,"line_start":123,"line_end":123,"column_start":5,"column_end":12},"name":"Warning","qualname":"::fmt::Format::Warning","value":"Format::Warning(T)","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Defines the style used for warnings, defaults to Yellow\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642895,"byte_end":642899,"line_start":125,"line_end":125,"column_start":5,"column_end":9},"name":"Good","qualname":"::fmt::Format::Good","value":"Format::Good(T)","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Defines the style used for good values, defaults to Green\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2077},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642944,"byte_end":642948,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"None","qualname":"::fmt::Format::None","value":"Format::None(T)","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Defines no formatting style\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3756},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642660,"byte_end":642666,"line_start":119,"line_end":119,"column_start":10,"column_end":16},"name":"Format","qualname":"::fmt::Format","value":"Format::{Error, Warning, Good, None}","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2069},{"krate":0,"index":2073},{"krate":0,"index":2077}],"decl_id":null,"docs":" Defines styles for different types of error messages. Defaults to Error=Red, Warning=Yellow,\n and Good=Green\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2178},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":649433,"byte_end":649439,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Result","qualname":"::errors::Result","value":"StdResult<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Short hand for [`Result`] type","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2083},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":650169,"byte_end":650181,"line_start":39,"line_end":39,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::errors::ErrorKind::InvalidValue","value":"ErrorKind::InvalidValue","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when an [`Arg`] has a set of possible values,\n and the user provides a value which isn't in that set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2085},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":650653,"byte_end":650668,"line_start":53,"line_end":53,"column_start":5,"column_end":20},"name":"UnknownArgument","qualname":"::errors::ErrorKind::UnknownArgument","value":"ErrorKind::UnknownArgument","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when a user provides a flag, option, argument or subcommand which isn't defined.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2087},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":651779,"byte_end":651796,"line_start":77,"line_end":77,"column_start":5,"column_end":22},"name":"InvalidSubcommand","qualname":"::errors::ErrorKind::InvalidSubcommand","value":"ErrorKind::InvalidSubcommand","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for\n being similar enough to an existing subcommand.\n If it doesn't meet the threshold, or the 'suggestions' feature is disabled,\n the more general [`UnknownArgument`] error is returned.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2089},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":653072,"byte_end":653094,"line_start":104,"line_end":104,"column_start":5,"column_end":27},"name":"UnrecognizedSubcommand","qualname":"::errors::ErrorKind::UnrecognizedSubcommand","value":"ErrorKind::UnrecognizedSubcommand","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides an unrecognized [`SubCommand`] which either\n doesn't meet the threshold for being similar enough to an existing subcommand,\n or the 'suggestions' feature is disabled.\n Otherwise the more detailed [`InvalidSubcommand`] error is returned.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2091},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":653622,"byte_end":653632,"line_start":121,"line_end":121,"column_start":5,"column_end":15},"name":"EmptyValue","qualname":"::errors::ErrorKind::EmptyValue","value":"ErrorKind::EmptyValue","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides an empty value for an option that does not allow empty\n values.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2093},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":654403,"byte_end":654418,"line_start":144,"line_end":144,"column_start":5,"column_end":20},"name":"ValueValidation","qualname":"::errors::ErrorKind::ValueValidation","value":"ErrorKind::ValueValidation","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides a value for an argument with a custom validation and the\n value fails that validation.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2095},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":655040,"byte_end":655053,"line_start":162,"line_end":162,"column_start":5,"column_end":18},"name":"TooManyValues","qualname":"::errors::ErrorKind::TooManyValues","value":"ErrorKind::TooManyValues","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when a user provides more values for an argument than were defined by setting\n [`Arg::max_values`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2097},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":655677,"byte_end":655689,"line_start":180,"line_end":180,"column_start":5,"column_end":17},"name":"TooFewValues","qualname":"::errors::ErrorKind::TooFewValues","value":"ErrorKind::TooFewValues","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides fewer values for an argument than were defined by setting\n [`Arg::min_values`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2099},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":656557,"byte_end":656576,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"WrongNumberOfValues","qualname":"::errors::ErrorKind::WrongNumberOfValues","value":"ErrorKind::WrongNumberOfValues","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides a different number of values for an argument than what's\n been defined by setting [`Arg::number_of_values`] or than was implicitly set by\n [`Arg::value_names`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2101},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":657211,"byte_end":657227,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"ArgumentConflict","qualname":"::errors::ErrorKind::ArgumentConflict","value":"ErrorKind::ArgumentConflict","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides two values which conflict with each other and can't be used\n together.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":657696,"byte_end":657719,"line_start":236,"line_end":236,"column_start":5,"column_end":28},"name":"MissingRequiredArgument","qualname":"::errors::ErrorKind::MissingRequiredArgument","value":"ErrorKind::MissingRequiredArgument","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user does not provide one or more required arguments.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2105},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":658432,"byte_end":658449,"line_start":256,"line_end":256,"column_start":5,"column_end":22},"name":"MissingSubcommand","qualname":"::errors::ErrorKind::MissingSubcommand","value":"ErrorKind::MissingSubcommand","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]),\n but the user does not provide one.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2107},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":659378,"byte_end":659405,"line_start":277,"line_end":277,"column_start":5,"column_end":32},"name":"MissingArgumentOrSubcommand","qualname":"::errors::ErrorKind::MissingArgumentOrSubcommand","value":"ErrorKind::MissingArgumentOrSubcommand","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when either an argument or [`SubCommand`] is required, as defined by\n [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":659945,"byte_end":659968,"line_start":293,"line_end":293,"column_start":5,"column_end":28},"name":"UnexpectedMultipleUsage","qualname":"::errors::ErrorKind::UnexpectedMultipleUsage","value":"ErrorKind::UnexpectedMultipleUsage","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides multiple values to an argument which doesn't allow that.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2111},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":661065,"byte_end":661076,"line_start":321,"line_end":321,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::errors::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when the user provides a value containing invalid UTF-8 for an argument and\n [`AppSettings::StrictUtf8`] is set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2113},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":661667,"byte_end":661680,"line_start":338,"line_end":338,"column_start":5,"column_end":18},"name":"HelpDisplayed","qualname":"::errors::ErrorKind::HelpDisplayed","value":"ErrorKind::HelpDisplayed","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Not a true \"error\" as it means `--help` or similar was used.\n The help message will be sent to `stdout`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":662121,"byte_end":662137,"line_start":352,"line_end":352,"column_start":5,"column_end":21},"name":"VersionDisplayed","qualname":"::errors::ErrorKind::VersionDisplayed","value":"ErrorKind::VersionDisplayed","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Not a true \"error\" as it means `--version` or similar was used.\n The message will be sent to `stdout`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":662511,"byte_end":662527,"line_start":359,"line_end":359,"column_start":5,"column_end":21},"name":"ArgumentNotFound","qualname":"::errors::ErrorKind::ArgumentNotFound","value":"ErrorKind::ArgumentNotFound","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value\n into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\n with name `config` to be converted, but `config` wasn't used by the user.\n [`value_t!`]: ./macro.value_t!.html\n [`values_t!`]: ./macro.values_t!.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2119},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":662729,"byte_end":662731,"line_start":364,"line_end":364,"column_start":5,"column_end":7},"name":"Io","qualname":"::errors::ErrorKind::Io","value":"ErrorKind::Io","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Represents an [I/O error].\n Can occur when writing to `stderr` or `stdout` or reading a configuration file.\n [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663019,"byte_end":663025,"line_start":370,"line_end":370,"column_start":5,"column_end":11},"name":"Format","qualname":"::errors::ErrorKind::Format","value":"ErrorKind::Format","parent":{"krate":0,"index":3762},"children":[],"decl_id":null,"docs":" Represents a [Format error] (which is a part of [`Display`]).\n Typically caused by writing to `stderr` or `stdout`.\n [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html\n [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3762},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":649564,"byte_end":649573,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::errors::ErrorKind","value":"ErrorKind::{InvalidValue, UnknownArgument, InvalidSubcommand, UnrecognizedSubcommand, EmptyValue, ValueValidation, TooManyValues, TooFewValues, WrongNumberOfValues, ArgumentConflict, MissingRequiredArgument, MissingSubcommand, MissingArgumentOrSubcommand, UnexpectedMultipleUsage, InvalidUtf8, HelpDisplayed, VersionDisplayed, ArgumentNotFound, Io, Format}","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2085},{"krate":0,"index":2087},{"krate":0,"index":2089},{"krate":0,"index":2091},{"krate":0,"index":2093},{"krate":0,"index":2095},{"krate":0,"index":2097},{"krate":0,"index":2099},{"krate":0,"index":2101},{"krate":0,"index":2103},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121}],"decl_id":null,"docs":" Command line argument parser kind of error\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":649555,"byte_end":663028,"line_start":22,"line_end":371,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3778},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663097,"byte_end":663102,"line_start":375,"line_end":375,"column_start":12,"column_end":17},"name":"Error","qualname":"::errors::Error","value":"Error { message, kind, info }","parent":null,"children":[{"krate":0,"index":2123},{"krate":0,"index":2125},{"krate":0,"index":2127}],"decl_id":null,"docs":" Command Line Argument Parser Error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2123},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663145,"byte_end":663152,"line_start":377,"line_end":377,"column_start":9,"column_end":16},"name":"message","qualname":"::errors::Error::message","value":"std::string::String","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" Formatted error message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2125},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663196,"byte_end":663200,"line_start":379,"line_end":379,"column_start":9,"column_end":13},"name":"kind","qualname":"::errors::Error::kind","value":"errors::ErrorKind","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" The type of error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2127},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663318,"byte_end":663322,"line_start":381,"line_end":381,"column_start":9,"column_end":13},"name":"info","qualname":"::errors::Error::info","value":"std::option::Option<std::vec::Vec<std::string::String>>","parent":{"krate":0,"index":3778},"children":[],"decl_id":null,"docs":" Any additional information passed along, such as the argument name that caused the error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663429,"byte_end":663439,"line_start":386,"line_end":386,"column_start":12,"column_end":22},"name":"use_stderr","qualname":"<Error>::use_stderr","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should the message be written to `stdout` or not\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663679,"byte_end":663683,"line_start":394,"line_end":394,"column_start":12,"column_end":16},"name":"exit","qualname":"<Error>::exit","value":"fn (&self) -> !","parent":null,"children":[],"decl_id":null,"docs":" Prints the error to `stderr` and exits with a status of `1`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":664000,"byte_end":664008,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"write_to","qualname":"<Error>::write_to","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":664120,"byte_end":664137,"line_start":408,"line_end":408,"column_start":12,"column_end":29},"name":"argument_conflict","qualname":"<Error>::argument_conflict","value":"fn <O, U> (arg: &AnyArg, other: Option<O>, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":665278,"byte_end":665289,"line_start":447,"line_end":447,"column_start":12,"column_end":23},"name":"empty_value","qualname":"<Error>::empty_value","value":"fn <U> (arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666005,"byte_end":666018,"line_start":472,"line_end":472,"column_start":12,"column_end":25},"name":"invalid_value","qualname":"<Error>::invalid_value","value":"fn <B, G, U> (bad_val: B, good_vals: &[G], arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":667346,"byte_end":667364,"line_start":518,"line_end":518,"column_start":12,"column_end":30},"name":"invalid_subcommand","qualname":"<Error>::invalid_subcommand","value":"fn <S, D, N, U> (subcmd: S, did_you_mean: D, name: N, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":668489,"byte_end":668512,"line_start":559,"line_end":559,"column_start":12,"column_end":35},"name":"unrecognized_subcommand","qualname":"<Error>::unrecognized_subcommand","value":"fn <S, N> (subcmd: S, name: N, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":669308,"byte_end":669333,"line_start":587,"line_end":587,"column_start":12,"column_end":37},"name":"missing_required_argument","qualname":"<Error>::missing_required_argument","value":"fn <R, U> (required: R, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":670015,"byte_end":670033,"line_start":612,"line_end":612,"column_start":12,"column_end":30},"name":"missing_subcommand","qualname":"<Error>::missing_subcommand","value":"fn <N, U> (name: N, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":670725,"byte_end":670737,"line_start":638,"line_end":638,"column_start":12,"column_end":24},"name":"invalid_utf8","qualname":"<Error>::invalid_utf8","value":"fn <U> (usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":671343,"byte_end":671358,"line_start":661,"line_end":661,"column_start":12,"column_end":27},"name":"too_many_values","qualname":"<Error>::too_many_values","value":"fn <V, U> (val: V, arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":672225,"byte_end":672239,"line_start":689,"line_end":689,"column_start":12,"column_end":26},"name":"too_few_values","qualname":"<Error>::too_few_values","value":"fn <U> (arg: &AnyArg, min_vals: u64, curr_vals: usize, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":673209,"byte_end":673225,"line_start":723,"line_end":723,"column_start":12,"column_end":28},"name":"value_validation","qualname":"<Error>::value_validation","value":"fn (arg: Option<&AnyArg>, err: String, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":673869,"byte_end":673890,"line_start":746,"line_end":746,"column_start":12,"column_end":33},"name":"value_validation_auto","qualname":"<Error>::value_validation_auto","value":"fn (err: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":674047,"byte_end":674069,"line_start":752,"line_end":752,"column_start":12,"column_end":34},"name":"wrong_number_of_values","qualname":"<Error>::wrong_number_of_values","value":"fn <S, U> (arg: &AnyArg, num_vals: u64, curr_vals: usize, suffix: S, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":675040,"byte_end":675065,"line_start":788,"line_end":788,"column_start":12,"column_end":37},"name":"unexpected_multiple_usage","qualname":"<Error>::unexpected_multiple_usage","value":"fn <U> (arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":675818,"byte_end":675834,"line_start":813,"line_end":813,"column_start":12,"column_end":28},"name":"unknown_argument","qualname":"<Error>::unknown_argument","value":"fn <A, U> (arg: A, did_you_mean: &str, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":676785,"byte_end":676793,"line_start":845,"line_end":845,"column_start":12,"column_end":20},"name":"io_error","qualname":"<Error>::io_error","value":"fn (e: &Error, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":677144,"byte_end":677167,"line_start":858,"line_end":858,"column_start":12,"column_end":35},"name":"argument_not_found_auto","qualname":"<Error>::argument_not_found_auto","value":"fn <A> (arg: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":677841,"byte_end":677857,"line_start":882,"line_end":882,"column_start":12,"column_end":28},"name":"with_description","qualname":"<Error>::with_description","value":"fn (description: &str, kind: ErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an error with a custom description.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2187},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":720975,"byte_end":720979,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Bash","qualname":"::completions::shell::Shell::Bash","value":"Shell::Bash","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Generates a .bash completion file for the Bourne Again SHell (BASH)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2189},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721069,"byte_end":721073,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Fish","qualname":"::completions::shell::Shell::Fish","value":"Shell::Fish","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Generates a .fish completion file for the Friendly Interactive SHell (fish)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2191},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721137,"byte_end":721140,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Zsh","qualname":"::completions::shell::Shell::Zsh","value":"Shell::Zsh","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Generates a completion file for the Z SHell (ZSH)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2193},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721197,"byte_end":721207,"line_start":17,"line_end":17,"column_start":5,"column_end":15},"name":"PowerShell","qualname":"::completions::shell::Shell::PowerShell","value":"Shell::PowerShell","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Generates a completion file for PowerShell\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2195},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721260,"byte_end":721266,"line_start":19,"line_end":19,"column_start":5,"column_end":11},"name":"Elvish","qualname":"::completions::shell::Shell::Elvish","value":"Shell::Elvish","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Generates a completion file for Elvish\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3800},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":720887,"byte_end":720892,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Shell","qualname":"::completions::shell::Shell","value":"Shell::{Bash, Fish, Zsh, PowerShell, Elvish}","parent":null,"children":[{"krate":0,"index":2187},{"krate":0,"index":2189},{"krate":0,"index":2191},{"krate":0,"index":2193},{"krate":0,"index":2195}],"decl_id":null,"docs":" Describes which shell to produce a completions file for\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":720878,"byte_end":721269,"line_start":9,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721354,"byte_end":721362,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"variants","qualname":"<Shell>::variants","value":"fn () -> [&'static str; 5]","parent":null,"children":[],"decl_id":null,"docs":" A list of possible variants in `&'static str` form\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3812},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":722808,"byte_end":722814,"line_start":14,"line_end":14,"column_start":16,"column_end":22},"name":"VecMap","qualname":"::map::vec_map::VecMap","value":"VecMap {  }","parent":null,"children":[{"krate":0,"index":2199}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":722901,"byte_end":722904,"line_start":19,"line_end":19,"column_start":16,"column_end":19},"name":"new","qualname":"<VecMap<V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723021,"byte_end":723024,"line_start":25,"line_end":25,"column_start":16,"column_end":19},"name":"len","qualname":"<VecMap<V>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723078,"byte_end":723086,"line_start":27,"line_end":27,"column_start":16,"column_end":24},"name":"is_empty","qualname":"<VecMap<V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723144,"byte_end":723150,"line_start":29,"line_end":29,"column_start":16,"column_end":22},"name":"insert","qualname":"<VecMap<V>>::insert","value":"fn (&mut self, key: usize, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723267,"byte_end":723273,"line_start":33,"line_end":33,"column_start":16,"column_end":22},"name":"values","qualname":"<VecMap<V>>::values","value":"fn (&self) -> Values<V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723334,"byte_end":723338,"line_start":35,"line_end":35,"column_start":16,"column_end":20},"name":"iter","qualname":"<VecMap<V>>::iter","value":"fn (&self) -> Iter<V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2530},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723460,"byte_end":723472,"line_start":41,"line_end":41,"column_start":16,"column_end":28},"name":"contains_key","qualname":"<VecMap<V>>::contains_key","value":"fn (&self, key: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723550,"byte_end":723555,"line_start":43,"line_end":43,"column_start":16,"column_end":21},"name":"entry","qualname":"<VecMap<V>>::entry","value":"fn (&mut self, key: usize) -> Entry<V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723633,"byte_end":723636,"line_start":45,"line_end":45,"column_start":16,"column_end":19},"name":"get","qualname":"<VecMap<V>>::get","value":"fn (&self, key: usize) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3826},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723862,"byte_end":723866,"line_start":53,"line_end":53,"column_start":16,"column_end":20},"name":"Iter","qualname":"::map::vec_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2211}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134441,"byte_end":134449,"line_start":57,"line_end":57,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134563,"byte_end":134571,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134806,"byte_end":134814,"line_start":72,"line_end":72,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3138}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168722,"byte_end":168733,"line_start":947,"line_end":947,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178230,"byte_end":178236,"line_start":76,"line_end":76,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":382},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":259091,"byte_end":259098,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260235,"byte_end":260236,"line_start":40,"line_end":40,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260439,"byte_end":260440,"line_start":49,"line_end":49,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260684,"byte_end":260687,"line_start":62,"line_end":62,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":261595,"byte_end":261599,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":264996,"byte_end":265000,"line_start":205,"line_end":205,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":279400,"byte_end":279404,"line_start":588,"line_end":588,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":289853,"byte_end":289857,"line_start":878,"line_end":878,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,118,97,108,105,100,97,116,111,114,46,114,115],"byte_start":296192,"byte_end":296201,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":648},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63499,"byte_end":63502,"line_start":68,"line_end":68,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":129970,"byte_end":129973,"line_start":1786,"line_end":1786,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":130077,"byte_end":130080,"line_start":1790,"line_end":1790,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":132198,"byte_end":132201,"line_start":1840,"line_end":1840,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340654,"byte_end":340657,"line_start":54,"line_end":54,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484762,"byte_end":484765,"line_start":3928,"line_end":3928,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":485026,"byte_end":485029,"line_start":3940,"line_end":3940,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491292,"byte_end":491302,"line_start":67,"line_end":67,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491474,"byte_end":491484,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1328},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":520894,"byte_end":520900,"line_start":795,"line_end":795,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":521108,"byte_end":521114,"line_start":802,"line_end":802,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":521228,"byte_end":521234,"line_start":806,"line_end":806,"column_start":32,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":521295,"byte_end":521301,"line_start":809,"line_end":809,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522682,"byte_end":522690,"line_start":847,"line_end":847,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522902,"byte_end":522910,"line_start":854,"line_end":854,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523026,"byte_end":523034,"line_start":858,"line_end":858,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523095,"byte_end":523103,"line_start":861,"line_end":861,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524297,"byte_end":524304,"line_start":899,"line_end":899,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524508,"byte_end":524515,"line_start":906,"line_end":906,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524627,"byte_end":524634,"line_start":910,"line_end":910,"column_start":32,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524695,"byte_end":524702,"line_start":913,"line_end":913,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526524,"byte_end":526534,"line_start":17,"line_end":17,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526616,"byte_end":526626,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534347,"byte_end":534357,"line_start":216,"line_end":216,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":535398,"byte_end":535408,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1518}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537057,"byte_end":537068,"line_start":24,"line_end":24,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537268,"byte_end":537279,"line_start":33,"line_end":33,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537472,"byte_end":537483,"line_start":42,"line_end":42,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537718,"byte_end":537729,"line_start":51,"line_end":51,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":538001,"byte_end":538012,"line_start":63,"line_end":63,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540256,"byte_end":540267,"line_start":111,"line_end":111,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540360,"byte_end":540371,"line_start":115,"line_end":115,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":542027,"byte_end":542037,"line_start":27,"line_end":27,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544365,"byte_end":544375,"line_start":103,"line_end":103,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":545278,"byte_end":545288,"line_start":134,"line_end":134,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":547473,"byte_end":547483,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":547580,"byte_end":547590,"line_start":181,"line_end":181,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549326,"byte_end":549336,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549535,"byte_end":549545,"line_start":34,"line_end":34,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549769,"byte_end":549779,"line_start":44,"line_end":44,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":550094,"byte_end":550104,"line_start":55,"line_end":55,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":551994,"byte_end":552004,"line_start":116,"line_end":116,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":554596,"byte_end":554606,"line_start":173,"line_end":173,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":554699,"byte_end":554709,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556974,"byte_end":556978,"line_start":19,"line_end":19,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557381,"byte_end":557385,"line_start":32,"line_end":32,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557482,"byte_end":557486,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558347,"byte_end":558353,"line_start":28,"line_end":28,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1954}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558796,"byte_end":558802,"line_start":47,"line_end":47,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":559056,"byte_end":559062,"line_start":57,"line_end":57,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559578,"byte_end":559586,"line_start":12,"line_end":12,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559834,"byte_end":559842,"line_start":24,"line_end":24,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559927,"byte_end":559935,"line_start":28,"line_end":28,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560432,"byte_end":560442,"line_start":12,"line_end":12,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560603,"byte_end":560613,"line_start":22,"line_end":22,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564965,"byte_end":564973,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2004},{"krate":0,"index":2006},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":577475,"byte_end":577483,"line_start":423,"line_end":423,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":577956,"byte_end":577964,"line_start":443,"line_end":443,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":583098,"byte_end":583106,"line_start":624,"line_end":624,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":584456,"byte_end":584464,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":3702},{"krate":0,"index":3704},{"krate":0,"index":3706}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":585472,"byte_end":585480,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2046}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587542,"byte_end":587553,"line_start":116,"line_end":116,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":2052}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,117,115,97,103,101,95,112,97,114,115,101,114,46,114,115],"byte_start":592197,"byte_end":592208,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":641256,"byte_end":641265,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642338,"byte_end":642347,"line_start":106,"line_end":106,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2124}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643516,"byte_end":643522,"line_start":144,"line_end":144,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":644057,"byte_end":644063,"line_start":162,"line_end":162,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663353,"byte_end":663358,"line_start":384,"line_end":384,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2186},{"krate":0,"index":2188},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2198},{"krate":0,"index":2200},{"krate":0,"index":2202},{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678202,"byte_end":678207,"line_start":895,"line_end":895,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678283,"byte_end":678288,"line_start":899,"line_end":899,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678420,"byte_end":678425,"line_start":903,"line_end":903,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678555,"byte_end":678560,"line_start":907,"line_end":907,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":679678,"byte_end":679683,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":681337,"byte_end":681344,"line_start":102,"line_end":102,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2278}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,98,97,115,104,46,114,115],"byte_start":688945,"byte_end":688952,"line_start":16,"line_end":16,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2326}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,102,105,115,104,46,114,115],"byte_start":695230,"byte_end":695237,"line_start":14,"line_end":14,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,122,115,104,46,114,115],"byte_start":698810,"byte_end":698816,"line_start":20,"line_end":20,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2372}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,112,111,119,101,114,115,104,101,108,108,46,114,115],"byte_start":712632,"byte_end":712645,"line_start":15,"line_end":15,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,101,108,118,105,115,104,46,114,115],"byte_start":717205,"byte_end":717214,"line_start":15,"line_end":15,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2430},{"krate":0,"index":2432}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721276,"byte_end":721281,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2450}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721458,"byte_end":721463,"line_start":27,"line_end":27,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2456}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":722100,"byte_end":722105,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2460}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,109,111,100,46,114,115],"byte_start":682635,"byte_end":682643,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2482},{"krate":0,"index":2484}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":722874,"byte_end":722880,"line_start":18,"line_end":18,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2518},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723971,"byte_end":723975,"line_start":57,"line_end":57,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2542}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":724157,"byte_end":724161,"line_start":63,"line_end":63,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2546},{"krate":0,"index":2548}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":724352,"byte_end":724356,"line_start":69,"line_end":69,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2552}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134441,"byte_end":134449,"line_start":57,"line_end":57,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":3116},"to":{"krate":2,"index":1822}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134563,"byte_end":134571,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":3116},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134806,"byte_end":134814,"line_start":72,"line_end":72,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":3116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168722,"byte_end":168733,"line_start":947,"line_end":947,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":3140},"to":{"krate":2,"index":6782}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":178230,"byte_end":178236,"line_start":76,"line_end":76,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":3174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":259091,"byte_end":259098,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":3190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260164,"byte_end":260170,"line_start":39,"line_end":39,"column_start":31,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":1176},"to":{"krate":0,"index":486}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260181,"byte_end":260188,"line_start":39,"line_end":39,"column_start":48,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":7970},"to":{"krate":0,"index":486}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260235,"byte_end":260236,"line_start":40,"line_end":40,"column_start":44,"column_end":45},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":215},"to":{"krate":0,"index":486}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260309,"byte_end":260323,"line_start":46,"line_end":46,"column_start":29,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":486},"to":{"krate":0,"index":490}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260334,"byte_end":260343,"line_start":46,"line_end":46,"column_start":54,"column_end":63},"kind":"SuperTrait","from":{"krate":0,"index":1232},"to":{"krate":0,"index":490}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260439,"byte_end":260440,"line_start":49,"line_end":49,"column_start":42,"column_end":43},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":225},"to":{"krate":0,"index":490}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":260684,"byte_end":260687,"line_start":62,"line_end":62,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":752},"to":{"krate":0,"index":1232}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":261595,"byte_end":261599,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":264996,"byte_end":265000,"line_start":205,"line_end":205,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":279400,"byte_end":279404,"line_start":588,"line_end":588,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":289853,"byte_end":289857,"line_start":878,"line_end":878,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,118,97,108,105,100,97,116,111,114,46,114,115],"byte_start":296192,"byte_end":296201,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63499,"byte_end":63502,"line_start":68,"line_end":68,"column_start":14,"column_end":17},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":129970,"byte_end":129973,"line_start":1786,"line_end":1786,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":752},"to":{"krate":2,"index":2516}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":130077,"byte_end":130080,"line_start":1790,"line_end":1790,"column_start":33,"column_end":36},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":752},"to":{"krate":0,"index":1176}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":132198,"byte_end":132201,"line_start":1840,"line_end":1840,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":752},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":340654,"byte_end":340657,"line_start":54,"line_end":54,"column_start":14,"column_end":17},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":3218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484762,"byte_end":484765,"line_start":3928,"line_end":3928,"column_start":44,"column_end":47},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":485026,"byte_end":485029,"line_start":3940,"line_end":3940,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":2328}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":485351,"byte_end":485358,"line_start":12,"line_end":12,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":7970},"to":{"krate":0,"index":1176}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491292,"byte_end":491302,"line_start":67,"line_end":67,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":491474,"byte_end":491484,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":3228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":520894,"byte_end":520900,"line_start":795,"line_end":795,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":521108,"byte_end":521114,"line_start":802,"line_end":802,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":4222}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":521228,"byte_end":521234,"line_start":806,"line_end":806,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":4236}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":521295,"byte_end":521301,"line_start":809,"line_end":809,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522682,"byte_end":522690,"line_start":847,"line_end":847,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":3244},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522902,"byte_end":522910,"line_start":854,"line_end":854,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":3244},"to":{"krate":2,"index":4222}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523026,"byte_end":523034,"line_start":858,"line_end":858,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":3244},"to":{"krate":2,"index":4236}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523095,"byte_end":523103,"line_start":861,"line_end":861,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":3244},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524297,"byte_end":524304,"line_start":899,"line_end":899,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":3250},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524508,"byte_end":524515,"line_start":906,"line_end":906,"column_start":34,"column_end":41},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":3250},"to":{"krate":2,"index":4222}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524627,"byte_end":524634,"line_start":910,"line_end":910,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":3250},"to":{"krate":2,"index":4236}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524695,"byte_end":524702,"line_start":913,"line_end":913,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":3250},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526524,"byte_end":526534,"line_start":17,"line_end":17,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":526616,"byte_end":526626,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534347,"byte_end":534357,"line_start":216,"line_end":216,"column_start":35,"column_end":45},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":2568}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":535398,"byte_end":535408,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":3256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537057,"byte_end":537068,"line_start":24,"line_end":24,"column_start":14,"column_end":25},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":3266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537268,"byte_end":537279,"line_start":33,"line_end":33,"column_start":44,"column_end":55},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537472,"byte_end":537483,"line_start":42,"line_end":42,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":537718,"byte_end":537729,"line_start":51,"line_end":51,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":538001,"byte_end":538012,"line_start":63,"line_end":63,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":1176}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540256,"byte_end":540267,"line_start":111,"line_end":111,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":1232}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540360,"byte_end":540371,"line_start":115,"line_end":115,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":3266},"to":{"krate":2,"index":2328}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":542027,"byte_end":542037,"line_start":27,"line_end":27,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":3280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544365,"byte_end":544375,"line_start":103,"line_end":103,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":3280},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":545278,"byte_end":545288,"line_start":134,"line_end":134,"column_start":33,"column_end":43},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":3280},"to":{"krate":0,"index":1176}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":547473,"byte_end":547483,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":3280},"to":{"krate":0,"index":1232}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":547580,"byte_end":547590,"line_start":181,"line_end":181,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":3280},"to":{"krate":2,"index":2328}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549326,"byte_end":549336,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":3290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549535,"byte_end":549545,"line_start":34,"line_end":34,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":3290},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":549769,"byte_end":549779,"line_start":44,"line_end":44,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":3290},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":550094,"byte_end":550104,"line_start":55,"line_end":55,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":3290},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":551994,"byte_end":552004,"line_start":116,"line_end":116,"column_start":33,"column_end":43},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":3290},"to":{"krate":0,"index":1176}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":554596,"byte_end":554606,"line_start":173,"line_end":173,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":3290},"to":{"krate":0,"index":1232}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":554699,"byte_end":554709,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":3290},"to":{"krate":2,"index":2328}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":556974,"byte_end":556978,"line_start":19,"line_end":19,"column_start":14,"column_end":18},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":3300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557381,"byte_end":557385,"line_start":32,"line_end":32,"column_start":44,"column_end":48},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":3300},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":557482,"byte_end":557486,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":3300},"to":{"krate":2,"index":2328}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558347,"byte_end":558353,"line_start":28,"line_end":28,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":558796,"byte_end":558802,"line_start":47,"line_end":47,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":3314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":559056,"byte_end":559062,"line_start":57,"line_end":57,"column_start":44,"column_end":50},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":3314},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559578,"byte_end":559586,"line_start":12,"line_end":12,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":3320},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559834,"byte_end":559842,"line_start":24,"line_end":24,"column_start":44,"column_end":52},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":3320},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":559927,"byte_end":559935,"line_start":28,"line_end":28,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":3320},"to":{"krate":2,"index":2516}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560432,"byte_end":560442,"line_start":12,"line_end":12,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":3326},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":560603,"byte_end":560613,"line_start":22,"line_end":22,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":3326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":564965,"byte_end":564973,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":3336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":577475,"byte_end":577483,"line_start":423,"line_end":423,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":3336},"to":{"krate":2,"index":7966}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":577956,"byte_end":577964,"line_start":443,"line_end":443,"column_start":41,"column_end":49},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":3336},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":583098,"byte_end":583106,"line_start":624,"line_end":624,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":3336},"to":{"krate":2,"index":2516}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":584456,"byte_end":584464,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":3690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":585472,"byte_end":585480,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":3690},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587542,"byte_end":587553,"line_start":116,"line_end":116,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":3708},"to":{"krate":2,"index":6782}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,117,115,97,103,101,95,112,97,114,115,101,114,46,114,115],"byte_start":592197,"byte_end":592208,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":3734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":641256,"byte_end":641265,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":2106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":642338,"byte_end":642347,"line_start":106,"line_end":106,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":2106},"to":{"krate":2,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643516,"byte_end":643522,"line_start":144,"line_end":144,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":3756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":644057,"byte_end":644063,"line_start":162,"line_end":162,"column_start":40,"column_end":46},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":3756},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663353,"byte_end":663358,"line_start":384,"line_end":384,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":3778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678202,"byte_end":678207,"line_start":895,"line_end":895,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":3778},"to":{"krate":1,"index":2344}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678283,"byte_end":678288,"line_start":899,"line_end":899,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":3778},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678420,"byte_end":678425,"line_start":903,"line_end":903,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":3778},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678555,"byte_end":678560,"line_start":907,"line_end":907,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":3778},"to":{"krate":2,"index":2572}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":679678,"byte_end":679683,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":1,"index":2842},"to":{"krate":0,"index":2246}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":681337,"byte_end":681344,"line_start":102,"line_end":102,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":3790},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,98,97,115,104,46,114,115],"byte_start":688945,"byte_end":688952,"line_start":16,"line_end":16,"column_start":14,"column_end":21},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":2308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,102,105,115,104,46,114,115],"byte_start":695230,"byte_end":695237,"line_start":14,"line_end":14,"column_start":14,"column_end":21},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,122,115,104,46,114,115],"byte_start":698810,"byte_end":698816,"line_start":20,"line_end":20,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":2366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,112,111,119,101,114,115,104,101,108,108,46,114,115],"byte_start":712632,"byte_end":712645,"line_start":15,"line_end":15,"column_start":14,"column_end":27},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":2404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,101,108,118,105,115,104,46,114,115],"byte_start":717205,"byte_end":717214,"line_start":15,"line_end":15,"column_start":14,"column_end":23},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":2426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721276,"byte_end":721281,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":3800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":721458,"byte_end":721463,"line_start":27,"line_end":27,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":3800},"to":{"krate":2,"index":6782}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":722100,"byte_end":722105,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":3800},"to":{"krate":2,"index":7970}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,109,111,100,46,114,115],"byte_start":682635,"byte_end":682643,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":2478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":722874,"byte_end":722880,"line_start":18,"line_end":18,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":3812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":723971,"byte_end":723975,"line_start":57,"line_end":57,"column_start":39,"column_end":43},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":3826},"to":{"krate":2,"index":7966}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":724157,"byte_end":724161,"line_start":63,"line_end":63,"column_start":34,"column_end":38},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":3826},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,50,46,48,47,115,114,99,47,109,97,112,46,114,115],"byte_start":724352,"byte_end":724356,"line_start":69,"line_end":69,"column_start":45,"column_end":49},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":3826},"to":{"krate":2,"index":4222}}]}