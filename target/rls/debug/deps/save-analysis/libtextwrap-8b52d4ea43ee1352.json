{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48],"program":"/Users/pmirabel/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","textwrap","/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8b52d4ea43ee1352","-C","extra-filename=-8b52d4ea43ee1352","--out-dir","/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps","-L","dependency=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps","--extern","unicode_width=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps/libunicode_width-1287814ce11fb05f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/pmirabel/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,119,111,114,107,115,112,97,99,101,95,114,115,47,100,111,109,111,116,105,99,95,101,110,111,99,101,97,110,95,99,117,116,105,105,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,116,101,120,116,119,114,97,112,45,56,98,53,50,100,52,101,97,52,51,101,101,49,51,53,50,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"textwrap","disambiguator":[15618760579735728398,15290211001187482448]},"crate_root":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src","external_crates":[{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6790510186242851874,16398378059199614345]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16952996814485381154,12694838226815725242]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10811575515166729188,5157104844567250356]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5499605051296296794,10602893664251808532]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[7615427394098920200,5473872719210042510]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10041795312384764197,6753572738911577197]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16531696748233657088,18425851410521139411]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[11028702079408304855,7762430400770749226]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[12306496864576505476,14030669852036366021]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","num":10,"id":{"name":"unicode_width","disambiguator":[2229277278190898867,2713329982102243129]}}],"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":42433,"line_start":1,"line_end":1305,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":42433,"line_start":1,"line_end":1305,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/textwrap-0.10.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":86},{"krate":0,"index":22},{"krate":0,"index":94},{"krate":0,"index":100},{"krate":0,"index":96},{"krate":0,"index":26},{"krate":0,"index":104},{"krate":0,"index":110},{"krate":0,"index":106},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":52},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":58},{"krate":0,"index":64},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":66},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82}],"decl_id":null,"docs":" `textwrap` provides functions for word wrapping and filling text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1547,"byte_end":1569,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1570,"byte_end":1609,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2851,"byte_end":2863,"line_start":82,"line_end":82,"column_start":11,"column_end":23},"name":"WordSplitter","qualname":"::WordSplitter","value":"WordSplitter","parent":null,"children":[{"krate":0,"index":20}],"decl_id":null,"docs":" An interface for splitting words.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3453,"byte_end":3458,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"split","qualname":"::WordSplitter::split","value":"fn <'w> (&self, word: &'w str) -> Vec<(&'w str, &'w str, &'w str)>","parent":{"krate":0,"index":18},"children":[],"decl_id":null,"docs":" Return all possible splits of word. Each split is a triple\n with a head, a hyphen, and a tail where `head + &hyphen +\n &tail == word`. The hyphen can be empty if there is already a\n hyphen in the head.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3905,"byte_end":3918,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"NoHyphenation","qualname":"::NoHyphenation","value":"","parent":null,"children":[],"decl_id":null,"docs":" Use this as a [`Wrapper.splitter`] to avoid any kind of\n hyphenation:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4383,"byte_end":4397,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"HyphenSplitter","qualname":"::HyphenSplitter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Simple and default way to split words: splitting on existing\n hyphens only.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7346,"byte_end":7353,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"Wrapper","qualname":"::Wrapper","value":"Wrapper { width, initial_indent, subsequent_indent, break_words, splitter }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77}],"decl_id":null,"docs":" A Wrapper holds settings for wrapping and filling text. Use it\n when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions\n are not flexible enough.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":69},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7449,"byte_end":7454,"line_start":211,"line_end":211,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrapper::width","value":"usize","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The width in columns at which the text will be wrapped.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":71},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7526,"byte_end":7540,"line_start":213,"line_end":213,"column_start":9,"column_end":23},"name":"initial_indent","qualname":"::Wrapper::initial_indent","value":"&'a str","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Indentation used for the first line of output.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":73},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7616,"byte_end":7633,"line_start":215,"line_end":215,"column_start":9,"column_end":26},"name":"subsequent_indent","qualname":"::Wrapper::subsequent_indent","value":"&'a str","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Indentation used for subsequent lines of output.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":75},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7801,"byte_end":7812,"line_start":219,"line_end":219,"column_start":9,"column_end":20},"name":"break_words","qualname":"::Wrapper::break_words","value":"bool","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Allow long words to be broken if they cannot fit on a line.\n When set to `false`, some lines may be longer than\n `self.width`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":77},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8011,"byte_end":8019,"line_start":223,"line_end":223,"column_start":9,"column_end":17},"name":"splitter","qualname":"::Wrapper::splitter","value":"S","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The method for splitting words. If the `hyphenation` feature\n is enabled, you can use a `hyphenation::language::Corpus` here\n to get language-aware hyphenation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8457,"byte_end":8460,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"new","qualname":"<Wrapper<'a, HyphenSplitter>>::new","value":"fn (width: usize) -> Wrapper<'a, HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Wrapper for wrapping at the specified width. By\n default, we allow words longer than `width` to be broken. A\n [`HyphenSplitter`] will be used by default for splitting\n words. See the [`WordSplitter`] trait for other options.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9542,"byte_end":9555,"line_start":264,"line_end":264,"column_start":12,"column_end":25},"name":"with_splitter","qualname":"<Wrapper<'a, S>>::with_splitter","value":"fn (width: usize, splitter: S) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Use the given [`WordSplitter`] to create a new Wrapper for\n wrapping at the specified width. By default, we allow words\n longer than `width` to be broken.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10339,"byte_end":10353,"line_start":290,"line_end":290,"column_start":12,"column_end":26},"name":"initial_indent","qualname":"<Wrapper<'a, S>>::initial_indent","value":"fn (self, indent: &'a str) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.initial_indent`]. The initial indentation is\n used on the very first line of output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11079,"byte_end":11096,"line_start":315,"line_end":315,"column_start":12,"column_end":29},"name":"subsequent_indent","qualname":"<Wrapper<'a, S>>::subsequent_indent","value":"fn (self, indent: &'a str) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.subsequent_indent`]. The subsequent indentation\n is used on lines following the first line of output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11483,"byte_end":11494,"line_start":327,"line_end":327,"column_start":12,"column_end":23},"name":"break_words","qualname":"<Wrapper<'a, S>>::break_words","value":"fn (self, setting: bool) -> Wrapper<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Change [`self.break_words`]. This controls if words longer\n than `self.width` can be broken, or if they will be left\n sticking out into the right margin.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12433,"byte_end":12437,"line_start":356,"line_end":356,"column_start":12,"column_end":16},"name":"fill","qualname":"<Wrapper<'a, S>>::fill","value":"fn (&self, s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14139,"byte_end":14143,"line_start":410,"line_end":410,"column_start":12,"column_end":16},"name":"wrap","qualname":"<Wrapper<'a, S>>::wrap","value":"fn (&self, s: &'a str) -> Vec<Cow<'a, str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `self.width` characters. Strings are\n wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16069,"byte_end":16078,"line_start":456,"line_end":456,"column_start":12,"column_end":21},"name":"wrap_iter","qualname":"<Wrapper<'a, S>>::wrap_iter","value":"fn (&'w self, s: &'a str) -> WrapIter<'w, 'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings\n are wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17550,"byte_end":17564,"line_start":496,"line_end":496,"column_start":12,"column_end":26},"name":"into_wrap_iter","qualname":"<Wrapper<'a, S>>::into_wrap_iter","value":"fn (self, s: &'a str) -> IntoWrapIter<'a, S>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `self.width` characters. Strings\n are wrapped based on their displayed width, not their size in\n bytes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18242,"byte_end":18254,"line_start":516,"line_end":516,"column_start":12,"column_end":24},"name":"IntoWrapIter","qualname":"::IntoWrapIter","value":"IntoWrapIter {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" An iterator over the lines of the input string which owns a\n `Wrapper`. An instance of `IntoWrapIter` is typically obtained\n through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18951,"byte_end":18959,"line_start":538,"line_end":538,"column_start":12,"column_end":20},"name":"WrapIter","qualname":"::WrapIter","value":"WrapIter {  }","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107}],"decl_id":null,"docs":" An iterator over the lines of the input string which borrows a\n `Wrapper`. An instance of `WrapIter` is typically obtained\n through the [`Wrapper::wrap_iter`] method.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26912,"byte_end":26916,"line_start":755,"line_end":755,"column_start":8,"column_end":12},"name":"fill","qualname":"::fill","value":"fn (s: &str, width: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Fill a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27939,"byte_end":27943,"line_start":787,"line_end":787,"column_start":8,"column_end":12},"name":"wrap","qualname":"::wrap","value":"fn (s: &str, width: usize) -> Vec<Cow<str>>","parent":null,"children":[],"decl_id":null,"docs":" Wrap a line of text at `width` characters. Strings are wrapped\n based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29366,"byte_end":29375,"line_start":823,"line_end":823,"column_start":8,"column_end":17},"name":"wrap_iter","qualname":"::wrap_iter","value":"fn (s: &str, width: usize) -> IntoWrapIter<HyphenSplitter>","parent":null,"children":[],"decl_id":null,"docs":" Lazily wrap a line of text at `width` characters. Strings are\n wrapped based on their displayed width, not their size in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30165,"byte_end":30171,"line_start":870,"line_end":870,"column_start":8,"column_end":14},"name":"indent","qualname":"::indent","value":"fn (s: &str, prefix: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Add prefix to each non-empty line.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30843,"byte_end":30849,"line_start":900,"line_end":900,"column_start":8,"column_end":14},"name":"dedent","qualname":"::dedent","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Removes common leading whitespace from each line.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4027,"byte_end":4040,"line_start":117,"line_end":117,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4738,"byte_end":4752,"line_start":138,"line_end":138,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8036,"byte_end":8043,"line_start":226,"line_end":226,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9279,"byte_end":9286,"line_start":258,"line_end":258,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18378,"byte_end":18390,"line_start":521,"line_end":521,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19108,"byte_end":19116,"line_start":543,"line_end":543,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20197,"byte_end":20209,"line_start":580,"line_end":580,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4027,"byte_end":4040,"line_start":117,"line_end":117,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":84},"to":{"krate":0,"index":18}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4738,"byte_end":4752,"line_start":138,"line_end":138,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":94},"to":{"krate":0,"index":18}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8036,"byte_end":8043,"line_start":226,"line_end":226,"column_start":10,"column_end":17},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9279,"byte_end":9286,"line_start":258,"line_end":258,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18378,"byte_end":18390,"line_start":521,"line_end":521,"column_start":40,"column_end":52},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":114},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19108,"byte_end":19116,"line_start":543,"line_end":543,"column_start":48,"column_end":56},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":120},"to":{"krate":2,"index":3838}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,101,120,116,119,114,97,112,45,48,46,49,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20197,"byte_end":20209,"line_start":580,"line_end":580,"column_start":10,"column_end":22},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}}]}