{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54],"program":"/Users/pmirabel/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","num_traits","/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=1fa1e7fca4743b6d","-C","extra-filename=-1fa1e7fca4743b6d","--out-dir","/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps","-L","dependency=/Users/pmirabel/workspace_rs/domotic_enocean_cutii/target/rls/debug/deps","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","/Users/pmirabel/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,119,111,114,107,115,112,97,99,101,95,114,115,47,100,111,109,111,116,105,99,95,101,110,111,99,101,97,110,95,99,117,116,105,105,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,110,117,109,95,116,114,97,105,116,115,45,49,102,97,49,101,55,102,99,97,52,55,52,51,98,54,100,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[12992984865419239410,13257055583940489045]},"crate_root":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src","external_crates":[{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16952996814485381154,12694838226815725242]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10811575515166729188,5157104844567250356]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":3,"id":{"name":"std","disambiguator":[6790510186242851874,16398378059199614345]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5499605051296296794,10602893664251808532]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[7615427394098920200,5473872719210042510]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10041795312384764197,6753572738911577197]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16531696748233657088,18425851410521139411]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[11028702079408304855,7762430400770749226]}},{"file_name":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[12306496864576505476,14030669852036366021]}}],"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":16463,"line_start":11,"line_end":488,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":926,"byte_end":933,"line_start":28,"line_end":28,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":974,"byte_end":979,"line_start":30,"line_end":30,"column_start":16,"column_end":21},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3632},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":996,"byte_end":1006,"line_start":31,"line_end":31,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1115,"byte_end":1119,"line_start":33,"line_end":33,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":340},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1121,"byte_end":1132,"line_start":33,"line_end":33,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1134,"byte_end":1147,"line_start":33,"line_end":33,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1149,"byte_end":1156,"line_start":33,"line_end":33,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1158,"byte_end":1169,"line_start":33,"line_end":33,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":596},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1193,"byte_end":1196,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":594},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1198,"byte_end":1202,"line_start":34,"line_end":34,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":582},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1204,"byte_end":1207,"line_start":34,"line_end":34,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":568},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1209,"byte_end":1213,"line_start":34,"line_end":34,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1229,"byte_end":1236,"line_start":35,"line_end":35,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":682},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1266,"byte_end":1276,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":696},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1278,"byte_end":1288,"line_start":37,"line_end":37,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":692},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1290,"byte_end":1300,"line_start":37,"line_end":37,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":706},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1302,"byte_end":1312,"line_start":37,"line_end":37,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":700},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1314,"byte_end":1324,"line_start":37,"line_end":37,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":710},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1326,"byte_end":1336,"line_start":37,"line_end":37,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":716},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1338,"byte_end":1348,"line_start":37,"line_end":37,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":688},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1350,"byte_end":1360,"line_start":37,"line_end":37,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":722},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1383,"byte_end":1386,"line_start":39,"line_end":39,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":754},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1411,"byte_end":1417,"line_start":40,"line_end":40,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1419,"byte_end":1431,"line_start":40,"line_end":40,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1459,"byte_end":1469,"line_start":41,"line_end":41,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":816},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1495,"byte_end":1506,"line_start":42,"line_end":42,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":824},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1508,"byte_end":1519,"line_start":42,"line_end":42,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1521,"byte_end":1532,"line_start":42,"line_end":42,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":834},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1534,"byte_end":1545,"line_start":42,"line_end":42,"column_start":64,"column_end":75},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":820},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1547,"byte_end":1558,"line_start":42,"line_end":42,"column_start":77,"column_end":88},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":884},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1575,"byte_end":1586,"line_start":43,"line_end":43,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":882},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1588,"byte_end":1591,"line_start":43,"line_end":43,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1593,"byte_end":1596,"line_start":43,"line_end":43,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1036},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1614,"byte_end":1617,"line_start":44,"line_end":44,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1038},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1619,"byte_end":1626,"line_start":44,"line_end":44,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1040},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1628,"byte_end":1634,"line_start":44,"line_end":44,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1008},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1636,"byte_end":1642,"line_start":44,"line_end":44,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1644,"byte_end":1652,"line_start":44,"line_end":44,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":16463,"line_start":11,"line_end":488,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":26},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":56},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":108},{"krate":0,"index":116},{"krate":0,"index":128},{"krate":0,"index":134},{"krate":0,"index":194},{"krate":0,"index":346},{"krate":0,"index":558},{"krate":0,"index":598},{"krate":0,"index":662},{"krate":0,"index":858},{"krate":0,"index":888},{"krate":0,"index":998},{"krate":0,"index":1048},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":7340},{"krate":0,"index":7346},{"krate":0,"index":7352},{"krate":0,"index":7358},{"krate":0,"index":7364},{"krate":0,"index":7370},{"krate":0,"index":7376},{"krate":0,"index":7382},{"krate":0,"index":7388},{"krate":0,"index":7394},{"krate":0,"index":7400},{"krate":0,"index":7406},{"krate":0,"index":1080},{"krate":0,"index":7412},{"krate":0,"index":7414},{"krate":0,"index":7418},{"krate":0,"index":7420},{"krate":0,"index":1086},{"krate":0,"index":1090},{"krate":0,"index":7424},{"krate":0,"index":7438},{"krate":0,"index":1092}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"deny(unconditional_recursion)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/bounds.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":144},{"krate":0,"index":150},{"krate":0,"index":162},{"krate":0,"index":174},{"krate":0,"index":180},{"krate":0,"index":1094},{"krate":0,"index":1100},{"krate":0,"index":1106},{"krate":0,"index":1112},{"krate":0,"index":1118},{"krate":0,"index":1124},{"krate":0,"index":1130},{"krate":0,"index":1136},{"krate":0,"index":1142},{"krate":0,"index":1148},{"krate":0,"index":1154},{"krate":0,"index":1160},{"krate":0,"index":182},{"krate":0,"index":1166},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":1172},{"krate":0,"index":1178},{"krate":0,"index":1184},{"krate":0,"index":1190},{"krate":0,"index":1196},{"krate":0,"index":1202},{"krate":0,"index":1208},{"krate":0,"index":1214},{"krate":0,"index":1220},{"krate":0,"index":1226},{"krate":0,"index":1232},{"krate":0,"index":1238},{"krate":0,"index":1244},{"krate":0,"index":1250},{"krate":0,"index":1256},{"krate":0,"index":1262},{"krate":0,"index":1268},{"krate":0,"index":1274},{"krate":0,"index":1280},{"krate":0,"index":1286},{"krate":0,"index":1292},{"krate":0,"index":1298}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":17944,"byte_end":17951,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":178}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":18087,"byte_end":18096,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":18181,"byte_end":18190,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/cast.rs","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":224},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":1304},{"krate":0,"index":1334},{"krate":0,"index":1364},{"krate":0,"index":1394},{"krate":0,"index":1424},{"krate":0,"index":1454},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":1484},{"krate":0,"index":1514},{"krate":0,"index":1544},{"krate":0,"index":1574},{"krate":0,"index":1604},{"krate":0,"index":1634},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":1664},{"krate":0,"index":1766},{"krate":0,"index":288},{"krate":0,"index":318},{"krate":0,"index":1868},{"krate":0,"index":1898},{"krate":0,"index":1928},{"krate":0,"index":1958},{"krate":0,"index":1988},{"krate":0,"index":2018},{"krate":0,"index":2048},{"krate":0,"index":2078},{"krate":0,"index":2108},{"krate":0,"index":2138},{"krate":0,"index":2168},{"krate":0,"index":2198},{"krate":0,"index":2228},{"krate":0,"index":2258},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":2344},{"krate":0,"index":2348},{"krate":0,"index":2352},{"krate":0,"index":2356},{"krate":0,"index":2360},{"krate":0,"index":2364},{"krate":0,"index":2368},{"krate":0,"index":2372},{"krate":0,"index":2376},{"krate":0,"index":2380},{"krate":0,"index":2384},{"krate":0,"index":2388},{"krate":0,"index":2392},{"krate":0,"index":2396},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":344},{"krate":0,"index":2400},{"krate":0,"index":2404},{"krate":0,"index":2408},{"krate":0,"index":2412},{"krate":0,"index":2416},{"krate":0,"index":2420},{"krate":0,"index":2424},{"krate":0,"index":2428},{"krate":0,"index":2432},{"krate":0,"index":2436},{"krate":0,"index":2440},{"krate":0,"index":2444},{"krate":0,"index":2448},{"krate":0,"index":2452},{"krate":0,"index":2456},{"krate":0,"index":2460},{"krate":0,"index":2464},{"krate":0,"index":2468},{"krate":0,"index":2472},{"krate":0,"index":2476},{"krate":0,"index":2480},{"krate":0,"index":2484},{"krate":0,"index":2488},{"krate":0,"index":2492},{"krate":0,"index":2496},{"krate":0,"index":2500},{"krate":0,"index":2504},{"krate":0,"index":2508},{"krate":0,"index":2512},{"krate":0,"index":2516},{"krate":0,"index":2520},{"krate":0,"index":2524},{"krate":0,"index":2528},{"krate":0,"index":2532},{"krate":0,"index":2536},{"krate":0,"index":2540},{"krate":0,"index":2544},{"krate":0,"index":2548},{"krate":0,"index":2552},{"krate":0,"index":2556},{"krate":0,"index":2560},{"krate":0,"index":2564},{"krate":0,"index":2568},{"krate":0,"index":2572},{"krate":0,"index":2576},{"krate":0,"index":2580},{"krate":0,"index":2584},{"krate":0,"index":2588},{"krate":0,"index":2592},{"krate":0,"index":2596},{"krate":0,"index":2600},{"krate":0,"index":2604},{"krate":0,"index":2608},{"krate":0,"index":2612},{"krate":0,"index":2616},{"krate":0,"index":2620},{"krate":0,"index":2624},{"krate":0,"index":2628},{"krate":0,"index":2632},{"krate":0,"index":2636},{"krate":0,"index":2640},{"krate":0,"index":2644},{"krate":0,"index":2648},{"krate":0,"index":2652},{"krate":0,"index":2656},{"krate":0,"index":2660},{"krate":0,"index":2664},{"krate":0,"index":2668},{"krate":0,"index":2672},{"krate":0,"index":2676},{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2688},{"krate":0,"index":2692},{"krate":0,"index":2696},{"krate":0,"index":2700},{"krate":0,"index":2704},{"krate":0,"index":2708},{"krate":0,"index":2712},{"krate":0,"index":2716},{"krate":0,"index":2720},{"krate":0,"index":2724},{"krate":0,"index":2728},{"krate":0,"index":2732},{"krate":0,"index":2736},{"krate":0,"index":2740},{"krate":0,"index":2744},{"krate":0,"index":2748},{"krate":0,"index":2752},{"krate":0,"index":2756},{"krate":0,"index":2760},{"krate":0,"index":2764},{"krate":0,"index":2768},{"krate":0,"index":2772},{"krate":0,"index":2776},{"krate":0,"index":2780},{"krate":0,"index":2784},{"krate":0,"index":2788},{"krate":0,"index":2792},{"krate":0,"index":2796},{"krate":0,"index":2800},{"krate":0,"index":2804},{"krate":0,"index":2808},{"krate":0,"index":2812},{"krate":0,"index":2816},{"krate":0,"index":2820},{"krate":0,"index":2824},{"krate":0,"index":2828},{"krate":0,"index":2832},{"krate":0,"index":2836},{"krate":0,"index":2840},{"krate":0,"index":2844},{"krate":0,"index":2848},{"krate":0,"index":2852},{"krate":0,"index":2856},{"krate":0,"index":2860},{"krate":0,"index":2864},{"krate":0,"index":2868},{"krate":0,"index":2872},{"krate":0,"index":2876},{"krate":0,"index":2880},{"krate":0,"index":2884},{"krate":0,"index":2888},{"krate":0,"index":2892},{"krate":0,"index":2896},{"krate":0,"index":2900},{"krate":0,"index":2904},{"krate":0,"index":2908},{"krate":0,"index":2912},{"krate":0,"index":2916},{"krate":0,"index":2920},{"krate":0,"index":2924},{"krate":0,"index":2928},{"krate":0,"index":2932},{"krate":0,"index":2936},{"krate":0,"index":2940},{"krate":0,"index":2944},{"krate":0,"index":2948},{"krate":0,"index":2952},{"krate":0,"index":2956},{"krate":0,"index":2960},{"krate":0,"index":2964},{"krate":0,"index":2968},{"krate":0,"index":2972},{"krate":0,"index":2976},{"krate":0,"index":2980},{"krate":0,"index":2984},{"krate":0,"index":2988},{"krate":0,"index":2992},{"krate":0,"index":2996},{"krate":0,"index":3000},{"krate":0,"index":3004},{"krate":0,"index":3008},{"krate":0,"index":3012},{"krate":0,"index":3016},{"krate":0,"index":3020},{"krate":0,"index":3024},{"krate":0,"index":3028},{"krate":0,"index":3032},{"krate":0,"index":3036},{"krate":0,"index":3040},{"krate":0,"index":3044},{"krate":0,"index":3048},{"krate":0,"index":3052},{"krate":0,"index":3056},{"krate":0,"index":3060},{"krate":0,"index":3064},{"krate":0,"index":3068},{"krate":0,"index":3072},{"krate":0,"index":3076},{"krate":0,"index":3080},{"krate":0,"index":3084},{"krate":0,"index":3088},{"krate":0,"index":3092},{"krate":0,"index":3096},{"krate":0,"index":3100},{"krate":0,"index":3104},{"krate":0,"index":3108},{"krate":0,"index":3112},{"krate":0,"index":3116},{"krate":0,"index":3120},{"krate":0,"index":3124},{"krate":0,"index":3128},{"krate":0,"index":3132},{"krate":0,"index":3136},{"krate":0,"index":3140},{"krate":0,"index":3144},{"krate":0,"index":3148},{"krate":0,"index":3152},{"krate":0,"index":3156},{"krate":0,"index":3160},{"krate":0,"index":3164},{"krate":0,"index":3168},{"krate":0,"index":3172},{"krate":0,"index":3176},{"krate":0,"index":3180},{"krate":0,"index":3184},{"krate":0,"index":3188},{"krate":0,"index":3192},{"krate":0,"index":3196},{"krate":0,"index":3200},{"krate":0,"index":3204},{"krate":0,"index":3208},{"krate":0,"index":3212},{"krate":0,"index":3216},{"krate":0,"index":3220},{"krate":0,"index":3224},{"krate":0,"index":3228},{"krate":0,"index":3232},{"krate":0,"index":3236},{"krate":0,"index":3240},{"krate":0,"index":3244},{"krate":0,"index":3248},{"krate":0,"index":3252},{"krate":0,"index":3256},{"krate":0,"index":3260},{"krate":0,"index":3264},{"krate":0,"index":3268},{"krate":0,"index":3272},{"krate":0,"index":3276},{"krate":0,"index":3280},{"krate":0,"index":3284}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":238},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21241,"byte_end":21252,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21328,"byte_end":21336,"line_start":15,"line_end":15,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21311,"byte_end":21320,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21503,"byte_end":21508,"line_start":21,"line_end":21,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21486,"byte_end":21495,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21670,"byte_end":21676,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21653,"byte_end":21662,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21840,"byte_end":21846,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21823,"byte_end":21832,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":21996,"byte_end":22002,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22389,"byte_end":22396,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22351,"byte_end":22360,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22365,"byte_end":22381,"line_start":47,"line_end":47,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22539,"byte_end":22547,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22522,"byte_end":22531,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22714,"byte_end":22719,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22697,"byte_end":22706,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22881,"byte_end":22887,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":22864,"byte_end":22873,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23051,"byte_end":23057,"line_start":72,"line_end":72,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23034,"byte_end":23043,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23221,"byte_end":23227,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23204,"byte_end":23213,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23614,"byte_end":23621,"line_start":88,"line_end":88,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23576,"byte_end":23585,"line_start":86,"line_end":86,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23590,"byte_end":23606,"line_start":87,"line_end":87,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23763,"byte_end":23769,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23746,"byte_end":23755,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23933,"byte_end":23939,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":23916,"byte_end":23925,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32337,"byte_end":32350,"line_start":364,"line_end":364,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32533,"byte_end":32543,"line_start":368,"line_end":368,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `isize` to return an optional value of this type. If the\n value cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32516,"byte_end":32525,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32801,"byte_end":32808,"line_start":375,"line_end":375,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `i8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32784,"byte_end":32793,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33058,"byte_end":33066,"line_start":382,"line_end":382,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `i16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33041,"byte_end":33050,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33317,"byte_end":33325,"line_start":389,"line_end":389,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `i32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33300,"byte_end":33309,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":33562,"byte_end":33570,"line_start":395,"line_end":395,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `i64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34060,"byte_end":34069,"line_start":406,"line_end":406,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `i128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34022,"byte_end":34031,"line_start":404,"line_end":404,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34036,"byte_end":34052,"line_start":405,"line_end":405,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34328,"byte_end":34338,"line_start":413,"line_end":413,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert a `usize` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34311,"byte_end":34320,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34596,"byte_end":34603,"line_start":420,"line_end":420,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `u8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34579,"byte_end":34588,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34853,"byte_end":34861,"line_start":427,"line_end":427,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `u16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":34836,"byte_end":34845,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35112,"byte_end":35120,"line_start":434,"line_end":434,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `u32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35095,"byte_end":35104,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35357,"byte_end":35365,"line_start":440,"line_end":440,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `u64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35855,"byte_end":35864,"line_start":451,"line_end":451,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert an `u128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35817,"byte_end":35826,"line_start":449,"line_end":449,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":35831,"byte_end":35847,"line_start":450,"line_end":450,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36121,"byte_end":36129,"line_start":458,"line_end":458,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert a `f32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36104,"byte_end":36113,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36379,"byte_end":36387,"line_start":465,"line_end":465,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":288},"children":[],"decl_id":null,"docs":" Convert a `f64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":36362,"byte_end":36371,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":328},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40633,"byte_end":40637,"line_start":635,"line_end":635,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40616,"byte_end":40625,"line_start":634,"line_end":634,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":330},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40771,"byte_end":40778,"line_start":640,"line_end":640,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":332}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40929,"byte_end":40933,"line_start":643,"line_end":643,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":340},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":43067,"byte_end":43078,"line_start":718,"line_end":718,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":342}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait AsPrimitive should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":43197,"byte_end":43200,"line_start":723,"line_end":723,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":340},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":346},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/float.rs","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":366},{"krate":0,"index":426},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":3400},{"krate":0,"index":3516},{"krate":0,"index":556},{"krate":0,"index":3632},{"krate":0,"index":3666},{"krate":0,"index":3700}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":366},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44851,"byte_end":44860,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":45257,"byte_end":45265,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":45628,"byte_end":45640,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":45950,"byte_end":45953,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":46369,"byte_end":46377,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":46756,"byte_end":46765,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":47185,"byte_end":47203,"line_start":116,"line_end":116,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":47565,"byte_end":47572,"line_start":133,"line_end":133,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":47950,"byte_end":47959,"line_start":150,"line_end":150,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48409,"byte_end":48415,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48392,"byte_end":48401,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48992,"byte_end":49003,"line_start":194,"line_end":194,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":48975,"byte_end":48984,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":49604,"byte_end":49613,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":49587,"byte_end":49596,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":50211,"byte_end":50220,"line_start":240,"line_end":240,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":50194,"byte_end":50203,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":51059,"byte_end":51067,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":51700,"byte_end":51705,"line_start":291,"line_end":291,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":51683,"byte_end":51692,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52551,"byte_end":52555,"line_start":325,"line_end":325,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52534,"byte_end":52543,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53387,"byte_end":53392,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53370,"byte_end":53379,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":54483,"byte_end":54488,"line_start":402,"line_end":402,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":54466,"byte_end":54475,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55209,"byte_end":55214,"line_start":434,"line_end":434,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55192,"byte_end":55201,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55919,"byte_end":55922,"line_start":463,"line_end":463,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55902,"byte_end":55911,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56846,"byte_end":56852,"line_start":497,"line_end":497,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56829,"byte_end":56838,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":57714,"byte_end":57730,"line_start":530,"line_end":530,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":57697,"byte_end":57706,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58460,"byte_end":58476,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58443,"byte_end":58452,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59109,"byte_end":59112,"line_start":582,"line_end":582,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59092,"byte_end":59101,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59909,"byte_end":59912,"line_start":616,"line_end":616,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59892,"byte_end":59901,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":60667,"byte_end":60672,"line_start":649,"line_end":649,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":60650,"byte_end":60659,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":61266,"byte_end":61270,"line_start":673,"line_end":673,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":61249,"byte_end":61258,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":62187,"byte_end":62197,"line_start":701,"line_end":701,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":62693,"byte_end":62703,"line_start":720,"line_end":720,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":63462,"byte_end":63476,"line_start":743,"line_end":743,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":434},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68214,"byte_end":68219,"line_start":898,"line_end":898,"column_start":11,"column_end":16},"name":"Float","qualname":"::float::Float","value":"Float: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548}],"decl_id":null,"docs":" Generic trait for floating point numbers","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68180,"byte_end":68203,"line_start":897,"line_end":897,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68465,"byte_end":68468,"line_start":908,"line_end":908,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::Float::nan","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the `NaN` value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68790,"byte_end":68798,"line_start":921,"line_end":921,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::Float::infinity","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":69149,"byte_end":69161,"line_start":934,"line_end":934,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::Float::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the negative infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":69531,"byte_end":69539,"line_start":948,"line_end":948,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::Float::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":69806,"byte_end":69815,"line_start":960,"line_end":960,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::Float::min_value","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":70114,"byte_end":70132,"line_start":972,"line_end":972,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::Float::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":70509,"byte_end":70516,"line_start":989,"line_end":989,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::Float::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":70857,"byte_end":70866,"line_start":1002,"line_end":1002,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::Float::max_value","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":71164,"byte_end":71170,"line_start":1016,"line_end":1016,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":71708,"byte_end":71719,"line_start":1036,"line_end":1036,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `true` if this value is positive infinity or negative infinity and\n false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":72211,"byte_end":72220,"line_start":1055,"line_end":1055,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":72970,"byte_end":72979,"line_start":1079,"line_end":1079,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite,\n [subnormal][subnormal], or `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":73493,"byte_end":73501,"line_start":1096,"line_end":1096,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":73793,"byte_end":73798,"line_start":1109,"line_end":1109,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::Float::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":74086,"byte_end":74090,"line_start":1122,"line_end":1122,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::Float::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":74404,"byte_end":74409,"line_start":1136,"line_end":1136,"column_start":8,"column_end":13},"name":"round","qualname":"::float::Float::round","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":74673,"byte_end":74678,"line_start":1149,"line_end":1149,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::Float::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75074,"byte_end":75079,"line_start":1164,"line_end":1164,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::Float::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75609,"byte_end":75612,"line_start":1184,"line_end":1184,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":76179,"byte_end":76185,"line_start":1203,"line_end":1203,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":76658,"byte_end":76674,"line_start":1221,"line_end":1221,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":77143,"byte_end":77159,"line_start":1239,"line_end":1239,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":77771,"byte_end":77778,"line_start":1259,"line_end":1259,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::float::Float::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":78076,"byte_end":78081,"line_start":1270,"line_end":1270,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":78418,"byte_end":78422,"line_start":1284,"line_end":1284,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":78701,"byte_end":78705,"line_start":1296,"line_end":1296,"column_start":8,"column_end":12},"name":"powf","qualname":"::float::Float::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Raise a number to a floating point power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":79128,"byte_end":79132,"line_start":1313,"line_end":1313,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::float::Float::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":79482,"byte_end":79485,"line_start":1329,"line_end":1329,"column_start":8,"column_end":11},"name":"exp","qualname":"::float::Float::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":79763,"byte_end":79767,"line_start":1343,"line_end":1343,"column_start":8,"column_end":12},"name":"exp2","qualname":"::float::Float::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":80114,"byte_end":80116,"line_start":1359,"line_end":1359,"column_start":8,"column_end":10},"name":"ln","qualname":"::float::Float::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":80626,"byte_end":80629,"line_start":1378,"line_end":1378,"column_start":8,"column_end":11},"name":"log","qualname":"::float::Float::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":80951,"byte_end":80955,"line_start":1392,"line_end":1392,"column_start":8,"column_end":12},"name":"log2","qualname":"::float::Float::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81270,"byte_end":81275,"line_start":1406,"line_end":1406,"column_start":8,"column_end":13},"name":"log10","qualname":"::float::Float::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81574,"byte_end":81584,"line_start":1420,"line_end":1420,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81557,"byte_end":81566,"line_start":1419,"line_end":1419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":82015,"byte_end":82025,"line_start":1438,"line_end":1438,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81998,"byte_end":82007,"line_start":1437,"line_end":1437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":82379,"byte_end":82382,"line_start":1454,"line_end":1454,"column_start":8,"column_end":11},"name":"max","qualname":"::float::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":82621,"byte_end":82624,"line_start":1466,"line_end":1466,"column_start":8,"column_end":11},"name":"min","qualname":"::float::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":83122,"byte_end":83129,"line_start":1485,"line_end":1485,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::float::Float::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":83437,"byte_end":83441,"line_start":1499,"line_end":1499,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::float::Float::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":83859,"byte_end":83864,"line_start":1515,"line_end":1515,"column_start":8,"column_end":13},"name":"hypot","qualname":"::float::Float::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":84192,"byte_end":84195,"line_start":1529,"line_end":1529,"column_start":8,"column_end":11},"name":"sin","qualname":"::float::Float::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":84512,"byte_end":84515,"line_start":1543,"line_end":1543,"column_start":8,"column_end":11},"name":"cos","qualname":"::float::Float::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":84825,"byte_end":84828,"line_start":1556,"line_end":1556,"column_start":8,"column_end":11},"name":"tan","qualname":"::float::Float::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":85308,"byte_end":85312,"line_start":1573,"line_end":1573,"column_start":8,"column_end":12},"name":"asin","qualname":"::float::Float::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":85788,"byte_end":85792,"line_start":1590,"line_end":1590,"column_start":8,"column_end":12},"name":"acos","qualname":"::float::Float::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":86156,"byte_end":86160,"line_start":1605,"line_end":1605,"column_start":8,"column_end":12},"name":"atan","qualname":"::float::Float::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":87041,"byte_end":87046,"line_start":1634,"line_end":1634,"column_start":8,"column_end":13},"name":"atan2","qualname":"::float::Float::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":87560,"byte_end":87567,"line_start":1652,"line_end":1652,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::float::Float::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":87935,"byte_end":87941,"line_start":1667,"line_end":1667,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::float::Float::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":88368,"byte_end":88373,"line_start":1683,"line_end":1683,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::float::Float::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":88793,"byte_end":88797,"line_start":1701,"line_end":1701,"column_start":8,"column_end":12},"name":"sinh","qualname":"::float::Float::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89233,"byte_end":89237,"line_start":1719,"line_end":1719,"column_start":8,"column_end":12},"name":"cosh","qualname":"::float::Float::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89693,"byte_end":89697,"line_start":1737,"line_end":1737,"column_start":8,"column_end":12},"name":"tanh","qualname":"::float::Float::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89992,"byte_end":89997,"line_start":1751,"line_end":1751,"column_start":8,"column_end":13},"name":"asinh","qualname":"::float::Float::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":90294,"byte_end":90299,"line_start":1765,"line_end":1765,"column_start":8,"column_end":13},"name":"acosh","qualname":"::float::Float::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":90630,"byte_end":90635,"line_start":1780,"line_end":1780,"column_start":8,"column_end":13},"name":"atanh","qualname":"::float::Float::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":91327,"byte_end":91341,"line_start":1801,"line_end":1801,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::Float::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":95986,"byte_end":95987,"line_start":1936,"line_end":1936,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96027,"byte_end":96036,"line_start":1938,"line_end":1938,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3638},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96083,"byte_end":96096,"line_start":1940,"line_end":1940,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96136,"byte_end":96145,"line_start":1942,"line_end":1942,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3642},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96191,"byte_end":96205,"line_start":1944,"line_end":1944,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3644},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96245,"byte_end":96254,"line_start":1946,"line_end":1946,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96294,"byte_end":96303,"line_start":1948,"line_end":1948,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3648},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96343,"byte_end":96352,"line_start":1950,"line_end":1950,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3650},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96392,"byte_end":96401,"line_start":1952,"line_end":1952,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96441,"byte_end":96450,"line_start":1954,"line_end":1954,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3654},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96490,"byte_end":96495,"line_start":1956,"line_end":1956,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3656},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96534,"byte_end":96538,"line_start":1958,"line_end":1958,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96578,"byte_end":96585,"line_start":1960,"line_end":1960,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96624,"byte_end":96630,"line_start":1962,"line_end":1962,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96682,"byte_end":96684,"line_start":1964,"line_end":1964,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3664},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96725,"byte_end":96731,"line_start":1966,"line_end":1966,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":3632},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":558},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/identities.rs","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":568},{"krate":0,"index":574},{"krate":0,"index":3734},{"krate":0,"index":3740},{"krate":0,"index":3746},{"krate":0,"index":3752},{"krate":0,"index":3758},{"krate":0,"index":3764},{"krate":0,"index":3770},{"krate":0,"index":3776},{"krate":0,"index":3782},{"krate":0,"index":3788},{"krate":0,"index":3794},{"krate":0,"index":3800},{"krate":0,"index":3806},{"krate":0,"index":3812},{"krate":0,"index":576},{"krate":0,"index":582},{"krate":0,"index":588},{"krate":0,"index":3818},{"krate":0,"index":3822},{"krate":0,"index":3826},{"krate":0,"index":3830},{"krate":0,"index":3834},{"krate":0,"index":3838},{"krate":0,"index":3842},{"krate":0,"index":3846},{"krate":0,"index":3850},{"krate":0,"index":3854},{"krate":0,"index":3858},{"krate":0,"index":3862},{"krate":0,"index":3866},{"krate":0,"index":3870},{"krate":0,"index":590},{"krate":0,"index":594},{"krate":0,"index":596}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":568},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":98503,"byte_end":98507,"line_start":5,"line_end":5,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99025,"byte_end":99029,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":568},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99131,"byte_end":99138,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":568},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99114,"byte_end":99123,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":582},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100049,"byte_end":100052,"line_start":75,"line_end":75,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":586}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100576,"byte_end":100579,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":582},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100888,"byte_end":100894,"line_start":99,"line_end":99,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":582},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100871,"byte_end":100880,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":594},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101753,"byte_end":101757,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101728,"byte_end":101745,"line_start":149,"line_end":149,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":596},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101867,"byte_end":101870,"line_start":156,"line_end":156,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101842,"byte_end":101859,"line_start":155,"line_end":155,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":598},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/int.rs","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":626},{"krate":0,"index":660},{"krate":0,"index":3874},{"krate":0,"index":3908},{"krate":0,"index":3942},{"krate":0,"index":3976},{"krate":0,"index":4010},{"krate":0,"index":4044},{"krate":0,"index":4078},{"krate":0,"index":4112},{"krate":0,"index":4146},{"krate":0,"index":4180},{"krate":0,"index":4214},{"krate":0,"index":4248}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102796,"byte_end":102803,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":658}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103478,"byte_end":103488,"line_start":40,"line_end":40,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103765,"byte_end":103776,"line_start":53,"line_end":53,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":104072,"byte_end":104085,"line_start":67,"line_end":67,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":104382,"byte_end":104396,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":104791,"byte_end":104802,"line_start":96,"line_end":96,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":105214,"byte_end":105226,"line_start":111,"line_end":111,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":105669,"byte_end":105679,"line_start":128,"line_end":128,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":106155,"byte_end":106165,"line_start":145,"line_end":145,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":106612,"byte_end":106624,"line_start":162,"line_end":162,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":107071,"byte_end":107083,"line_start":179,"line_end":179,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":107388,"byte_end":107398,"line_start":193,"line_end":193,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":107894,"byte_end":107901,"line_start":212,"line_end":212,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":108406,"byte_end":108413,"line_start":231,"line_end":231,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":108896,"byte_end":108901,"line_start":250,"line_end":250,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":109387,"byte_end":109392,"line_start":269,"line_end":269,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":109630,"byte_end":109633,"line_start":280,"line_end":280,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":662},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":720},{"krate":0,"index":752},{"krate":0,"index":788},{"krate":0,"index":798}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":664},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":682},{"krate":0,"index":686},{"krate":0,"index":4282},{"krate":0,"index":4286},{"krate":0,"index":4290},{"krate":0,"index":4294},{"krate":0,"index":4298},{"krate":0,"index":4302},{"krate":0,"index":4306},{"krate":0,"index":4310},{"krate":0,"index":4314},{"krate":0,"index":4318},{"krate":0,"index":4322},{"krate":0,"index":4326},{"krate":0,"index":688},{"krate":0,"index":4330},{"krate":0,"index":4334},{"krate":0,"index":4338},{"krate":0,"index":4342},{"krate":0,"index":4346},{"krate":0,"index":4350},{"krate":0,"index":4354},{"krate":0,"index":4358},{"krate":0,"index":4362},{"krate":0,"index":4366},{"krate":0,"index":4370},{"krate":0,"index":4374},{"krate":0,"index":692},{"krate":0,"index":4378},{"krate":0,"index":4382},{"krate":0,"index":4386},{"krate":0,"index":4390},{"krate":0,"index":4394},{"krate":0,"index":4398},{"krate":0,"index":4402},{"krate":0,"index":4406},{"krate":0,"index":4410},{"krate":0,"index":4414},{"krate":0,"index":4418},{"krate":0,"index":4422},{"krate":0,"index":696},{"krate":0,"index":4426},{"krate":0,"index":4430},{"krate":0,"index":4434},{"krate":0,"index":4438},{"krate":0,"index":4442},{"krate":0,"index":4446},{"krate":0,"index":4450},{"krate":0,"index":4454},{"krate":0,"index":4458},{"krate":0,"index":4462},{"krate":0,"index":4466},{"krate":0,"index":4470},{"krate":0,"index":700},{"krate":0,"index":4474},{"krate":0,"index":4478},{"krate":0,"index":4482},{"krate":0,"index":4486},{"krate":0,"index":4490},{"krate":0,"index":4494},{"krate":0,"index":4498},{"krate":0,"index":4502},{"krate":0,"index":4506},{"krate":0,"index":4510},{"krate":0,"index":4514},{"krate":0,"index":4518},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":4522},{"krate":0,"index":4526},{"krate":0,"index":4530},{"krate":0,"index":4534},{"krate":0,"index":4538},{"krate":0,"index":4542},{"krate":0,"index":4546},{"krate":0,"index":4550},{"krate":0,"index":4554},{"krate":0,"index":4558},{"krate":0,"index":4562},{"krate":0,"index":4566},{"krate":0,"index":710},{"krate":0,"index":714},{"krate":0,"index":4570},{"krate":0,"index":4574},{"krate":0,"index":4578},{"krate":0,"index":4582},{"krate":0,"index":4586},{"krate":0,"index":4590},{"krate":0,"index":4594},{"krate":0,"index":4598},{"krate":0,"index":4602},{"krate":0,"index":4606},{"krate":0,"index":4610},{"krate":0,"index":4614},{"krate":0,"index":716},{"krate":0,"index":4618},{"krate":0,"index":4622},{"krate":0,"index":4626},{"krate":0,"index":4630},{"krate":0,"index":4634},{"krate":0,"index":4638},{"krate":0,"index":4642},{"krate":0,"index":4646},{"krate":0,"index":4650},{"krate":0,"index":4654},{"krate":0,"index":4658},{"krate":0,"index":4662}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":682},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112413,"byte_end":112423,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":684}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112565,"byte_end":112576,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":682},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":688},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113554,"byte_end":113564,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":690}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113713,"byte_end":113724,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":688},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":692},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114457,"byte_end":114467,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":694}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114641,"byte_end":114652,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":696},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115425,"byte_end":115435,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":698}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115615,"byte_end":115626,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":696},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":700},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":116412,"byte_end":116422,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":702}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":117216,"byte_end":117227,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":700},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":706},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":118191,"byte_end":118201,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":708}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":118851,"byte_end":118862,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":706},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":710},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":119611,"byte_end":119621,"line_start":199,"line_end":199,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":712}],"decl_id":null,"docs":" Performs a left shift that returns `None` on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":120146,"byte_end":120157,"line_start":213,"line_end":213,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":710},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":716},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121190,"byte_end":121200,"line_start":244,"line_end":244,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":718}],"decl_id":null,"docs":" Performs a right shift that returns `None` on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121725,"byte_end":121736,"line_start":258,"line_end":258,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":716},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":720},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":740},{"krate":0,"index":746}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":722},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":122525,"byte_end":122528,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":726}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":724},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":122588,"byte_end":122594,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":122873,"byte_end":122876,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":722},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":752},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":760},{"krate":0,"index":764},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":4666},{"krate":0,"index":4672},{"krate":0,"index":4678},{"krate":0,"index":4684},{"krate":0,"index":4690},{"krate":0,"index":4696},{"krate":0,"index":4702},{"krate":0,"index":4708},{"krate":0,"index":4714},{"krate":0,"index":4720},{"krate":0,"index":4726},{"krate":0,"index":4732},{"krate":0,"index":778},{"krate":0,"index":782},{"krate":0,"index":786},{"krate":0,"index":4738},{"krate":0,"index":4742},{"krate":0,"index":4746},{"krate":0,"index":4750},{"krate":0,"index":4754},{"krate":0,"index":4758},{"krate":0,"index":4762},{"krate":0,"index":4766},{"krate":0,"index":4770},{"krate":0,"index":4774},{"krate":0,"index":4778},{"krate":0,"index":4782}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":754},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":123993,"byte_end":123999,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":758}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":756},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124097,"byte_end":124103,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124164,"byte_end":124171,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":760},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124269,"byte_end":124281,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":762}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":124362,"byte_end":124376,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":760},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":788},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":796},{"krate":0,"index":4786},{"krate":0,"index":4792},{"krate":0,"index":4798},{"krate":0,"index":4804},{"krate":0,"index":4810},{"krate":0,"index":4816},{"krate":0,"index":4822},{"krate":0,"index":4828},{"krate":0,"index":4834},{"krate":0,"index":4840},{"krate":0,"index":4846},{"krate":0,"index":4852}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":790},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":127157,"byte_end":127167,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":794}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":127293,"byte_end":127307,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":127459,"byte_end":127473,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":798},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":4858},{"krate":0,"index":4862},{"krate":0,"index":4866},{"krate":0,"index":4870},{"krate":0,"index":4874},{"krate":0,"index":4878},{"krate":0,"index":4882},{"krate":0,"index":4886},{"krate":0,"index":4890},{"krate":0,"index":4894},{"krate":0,"index":4898},{"krate":0,"index":4902},{"krate":0,"index":820},{"krate":0,"index":4906},{"krate":0,"index":4910},{"krate":0,"index":4914},{"krate":0,"index":4918},{"krate":0,"index":4922},{"krate":0,"index":4926},{"krate":0,"index":4930},{"krate":0,"index":4934},{"krate":0,"index":4938},{"krate":0,"index":4942},{"krate":0,"index":4946},{"krate":0,"index":4950},{"krate":0,"index":824},{"krate":0,"index":4954},{"krate":0,"index":4958},{"krate":0,"index":4962},{"krate":0,"index":4966},{"krate":0,"index":4970},{"krate":0,"index":4974},{"krate":0,"index":4978},{"krate":0,"index":4982},{"krate":0,"index":4986},{"krate":0,"index":4990},{"krate":0,"index":4994},{"krate":0,"index":4998},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":5002},{"krate":0,"index":5006},{"krate":0,"index":5010},{"krate":0,"index":5014},{"krate":0,"index":5018},{"krate":0,"index":5022},{"krate":0,"index":5026},{"krate":0,"index":5030},{"krate":0,"index":5034},{"krate":0,"index":5038},{"krate":0,"index":5042},{"krate":0,"index":5046},{"krate":0,"index":834},{"krate":0,"index":5050},{"krate":0,"index":5054},{"krate":0,"index":5058},{"krate":0,"index":5062},{"krate":0,"index":5066},{"krate":0,"index":5070},{"krate":0,"index":5074},{"krate":0,"index":5078},{"krate":0,"index":5082},{"krate":0,"index":5086},{"krate":0,"index":5090},{"krate":0,"index":5094},{"krate":0,"index":838},{"krate":0,"index":842},{"krate":0,"index":846},{"krate":0,"index":850},{"krate":0,"index":854}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":816},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128681,"byte_end":128692,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":818}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128851,"byte_end":128863,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":820},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129575,"byte_end":129586,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":822}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129748,"byte_end":129760,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":824},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130475,"byte_end":130486,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":826}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130651,"byte_end":130663,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":824},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":830},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":131632,"byte_end":131643,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":832}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":132250,"byte_end":132262,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":834},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133038,"byte_end":133049,"line_start":139,"line_end":139,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":836}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133657,"byte_end":133669,"line_start":154,"line_end":154,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":834},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":858},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/pow.rs","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":870},{"krate":0,"index":876},{"krate":0,"index":5098},{"krate":0,"index":5104},{"krate":0,"index":5110},{"krate":0,"index":5116},{"krate":0,"index":5122},{"krate":0,"index":5128},{"krate":0,"index":5134},{"krate":0,"index":5140},{"krate":0,"index":5146},{"krate":0,"index":5152},{"krate":0,"index":5158},{"krate":0,"index":5164},{"krate":0,"index":5170},{"krate":0,"index":5176},{"krate":0,"index":5182},{"krate":0,"index":5188},{"krate":0,"index":5194},{"krate":0,"index":5200},{"krate":0,"index":5206},{"krate":0,"index":5212},{"krate":0,"index":5218},{"krate":0,"index":5224},{"krate":0,"index":5230},{"krate":0,"index":5236},{"krate":0,"index":5242},{"krate":0,"index":5248},{"krate":0,"index":5254},{"krate":0,"index":5260},{"krate":0,"index":5266},{"krate":0,"index":5272},{"krate":0,"index":5278},{"krate":0,"index":5284},{"krate":0,"index":5290},{"krate":0,"index":5296},{"krate":0,"index":5302},{"krate":0,"index":5308},{"krate":0,"index":5314},{"krate":0,"index":5320},{"krate":0,"index":5326},{"krate":0,"index":5332},{"krate":0,"index":5338},{"krate":0,"index":5344},{"krate":0,"index":5350},{"krate":0,"index":5356},{"krate":0,"index":5362},{"krate":0,"index":5368},{"krate":0,"index":5374},{"krate":0,"index":5380},{"krate":0,"index":5386},{"krate":0,"index":5392},{"krate":0,"index":5398},{"krate":0,"index":5404},{"krate":0,"index":5410},{"krate":0,"index":5416},{"krate":0,"index":5422},{"krate":0,"index":5428},{"krate":0,"index":5434},{"krate":0,"index":5440},{"krate":0,"index":5446},{"krate":0,"index":5452},{"krate":0,"index":5458},{"krate":0,"index":5464},{"krate":0,"index":5470},{"krate":0,"index":5476},{"krate":0,"index":5482},{"krate":0,"index":5488},{"krate":0,"index":5494},{"krate":0,"index":5500},{"krate":0,"index":5506},{"krate":0,"index":5512},{"krate":0,"index":5518},{"krate":0,"index":5524},{"krate":0,"index":5530},{"krate":0,"index":5536},{"krate":0,"index":5542},{"krate":0,"index":5548},{"krate":0,"index":5554},{"krate":0,"index":5560},{"krate":0,"index":5566},{"krate":0,"index":5572},{"krate":0,"index":5578},{"krate":0,"index":5584},{"krate":0,"index":5590},{"krate":0,"index":5596},{"krate":0,"index":5602},{"krate":0,"index":5608},{"krate":0,"index":5614},{"krate":0,"index":5620},{"krate":0,"index":5626},{"krate":0,"index":5632},{"krate":0,"index":5638},{"krate":0,"index":5644},{"krate":0,"index":5650},{"krate":0,"index":5656},{"krate":0,"index":5662},{"krate":0,"index":5668},{"krate":0,"index":5674},{"krate":0,"index":5680},{"krate":0,"index":5686},{"krate":0,"index":5692},{"krate":0,"index":5698},{"krate":0,"index":5704},{"krate":0,"index":5710},{"krate":0,"index":5716},{"krate":0,"index":5722},{"krate":0,"index":5728},{"krate":0,"index":5734},{"krate":0,"index":5740},{"krate":0,"index":5746},{"krate":0,"index":5752},{"krate":0,"index":5758},{"krate":0,"index":5764},{"krate":0,"index":5770},{"krate":0,"index":5776},{"krate":0,"index":5782},{"krate":0,"index":5788},{"krate":0,"index":5794},{"krate":0,"index":5800},{"krate":0,"index":5806},{"krate":0,"index":5812},{"krate":0,"index":5818},{"krate":0,"index":5824},{"krate":0,"index":5830},{"krate":0,"index":5836},{"krate":0,"index":5842},{"krate":0,"index":5848},{"krate":0,"index":5854},{"krate":0,"index":5860},{"krate":0,"index":5866},{"krate":0,"index":5872},{"krate":0,"index":5878},{"krate":0,"index":5884},{"krate":0,"index":5890},{"krate":0,"index":5896},{"krate":0,"index":5902},{"krate":0,"index":5908},{"krate":0,"index":5914},{"krate":0,"index":5920},{"krate":0,"index":5926},{"krate":0,"index":5932},{"krate":0,"index":5938},{"krate":0,"index":5944},{"krate":0,"index":5950},{"krate":0,"index":5956},{"krate":0,"index":5962},{"krate":0,"index":5968},{"krate":0,"index":5974},{"krate":0,"index":5980},{"krate":0,"index":5986},{"krate":0,"index":5992},{"krate":0,"index":5998},{"krate":0,"index":6004},{"krate":0,"index":6010},{"krate":0,"index":6016},{"krate":0,"index":6022},{"krate":0,"index":6028},{"krate":0,"index":6034},{"krate":0,"index":6040},{"krate":0,"index":6046},{"krate":0,"index":6052},{"krate":0,"index":6058},{"krate":0,"index":6064},{"krate":0,"index":6070},{"krate":0,"index":6076},{"krate":0,"index":6082},{"krate":0,"index":6088},{"krate":0,"index":6094},{"krate":0,"index":6100},{"krate":0,"index":6106},{"krate":0,"index":6112},{"krate":0,"index":6118},{"krate":0,"index":6124},{"krate":0,"index":6130},{"krate":0,"index":6136},{"krate":0,"index":6142},{"krate":0,"index":6148},{"krate":0,"index":6154},{"krate":0,"index":6160},{"krate":0,"index":6166},{"krate":0,"index":6172},{"krate":0,"index":6178},{"krate":0,"index":6184},{"krate":0,"index":6190},{"krate":0,"index":6196},{"krate":0,"index":6202},{"krate":0,"index":6208},{"krate":0,"index":6214},{"krate":0,"index":6220},{"krate":0,"index":6226},{"krate":0,"index":6232},{"krate":0,"index":6238},{"krate":0,"index":6244},{"krate":0,"index":6250},{"krate":0,"index":6256},{"krate":0,"index":6262},{"krate":0,"index":6268},{"krate":0,"index":6274},{"krate":0,"index":6280},{"krate":0,"index":6286},{"krate":0,"index":6292},{"krate":0,"index":6298},{"krate":0,"index":6304},{"krate":0,"index":6310},{"krate":0,"index":6316},{"krate":0,"index":6322},{"krate":0,"index":6328},{"krate":0,"index":6334},{"krate":0,"index":6340},{"krate":0,"index":6346},{"krate":0,"index":6352},{"krate":0,"index":6358},{"krate":0,"index":6364},{"krate":0,"index":6370},{"krate":0,"index":6376},{"krate":0,"index":6382},{"krate":0,"index":6388},{"krate":0,"index":6394},{"krate":0,"index":6400},{"krate":0,"index":6406},{"krate":0,"index":6412},{"krate":0,"index":6418},{"krate":0,"index":6424},{"krate":0,"index":6430},{"krate":0,"index":6436},{"krate":0,"index":6442},{"krate":0,"index":6448},{"krate":0,"index":6454},{"krate":0,"index":6460},{"krate":0,"index":6466},{"krate":0,"index":6472},{"krate":0,"index":6478},{"krate":0,"index":6484},{"krate":0,"index":6490},{"krate":0,"index":6496},{"krate":0,"index":6502},{"krate":0,"index":6508},{"krate":0,"index":6514},{"krate":0,"index":6520},{"krate":0,"index":6526},{"krate":0,"index":6532},{"krate":0,"index":6538},{"krate":0,"index":6544},{"krate":0,"index":6550},{"krate":0,"index":6556},{"krate":0,"index":6562},{"krate":0,"index":6568},{"krate":0,"index":6574},{"krate":0,"index":6580},{"krate":0,"index":6586},{"krate":0,"index":6592},{"krate":0,"index":6598},{"krate":0,"index":6604},{"krate":0,"index":6610},{"krate":0,"index":6616},{"krate":0,"index":6622},{"krate":0,"index":6628},{"krate":0,"index":6634},{"krate":0,"index":6640},{"krate":0,"index":6646},{"krate":0,"index":6652},{"krate":0,"index":6658},{"krate":0,"index":6664},{"krate":0,"index":6670},{"krate":0,"index":6676},{"krate":0,"index":6682},{"krate":0,"index":6688},{"krate":0,"index":6694},{"krate":0,"index":6700},{"krate":0,"index":6706},{"krate":0,"index":6712},{"krate":0,"index":6718},{"krate":0,"index":6724},{"krate":0,"index":6730},{"krate":0,"index":6736},{"krate":0,"index":6742},{"krate":0,"index":6748},{"krate":0,"index":6754},{"krate":0,"index":6760},{"krate":0,"index":6766},{"krate":0,"index":6772},{"krate":0,"index":6778},{"krate":0,"index":6784},{"krate":0,"index":6790},{"krate":0,"index":6796},{"krate":0,"index":6802},{"krate":0,"index":6808},{"krate":0,"index":6814},{"krate":0,"index":6820},{"krate":0,"index":878},{"krate":0,"index":882},{"krate":0,"index":884}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":870},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":137316,"byte_end":137319,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":874}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":872},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":137384,"byte_end":137390,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":137579,"byte_end":137582,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":882},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":142229,"byte_end":142232,"line_start":188,"line_end":188,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":142212,"byte_end":142221,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":884},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":143239,"byte_end":143250,"line_start":229,"line_end":229,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,112,111,119,46,114,115],"byte_start":143222,"byte_end":143231,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":888},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"real","qualname":"::real","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/real.rs","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":900},{"krate":0,"index":996}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1786,"byte_end":1809,"line_start":56,"line_end":56,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":900},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144506,"byte_end":144510,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"Real","qualname":"::real::Real","value":"Real: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994}],"decl_id":null,"docs":" A trait for real number types that do not necessarily have\n floating-point-specific characteristics such as NaN and infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144827,"byte_end":144836,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"min_value","qualname":"::real::Real::min_value","value":"fn () -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":145139,"byte_end":145157,"line_start":38,"line_end":38,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::real::Real::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":145538,"byte_end":145545,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::real::Real::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":145807,"byte_end":145816,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"max_value","qualname":"::real::Real::max_value","value":"fn () -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":146103,"byte_end":146108,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"floor","qualname":"::real::Real::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":146401,"byte_end":146405,"line_start":92,"line_end":92,"column_start":8,"column_end":12},"name":"ceil","qualname":"::real::Real::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":146724,"byte_end":146729,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"round","qualname":"::real::Real::round","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":146998,"byte_end":147003,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"trunc","qualname":"::real::Real::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":147404,"byte_end":147409,"line_start":134,"line_end":134,"column_start":8,"column_end":13},"name":"fract","qualname":"::real::Real::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":147964,"byte_end":147967,"line_start":154,"line_end":154,"column_start":8,"column_end":11},"name":"abs","qualname":"::real::Real::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":148539,"byte_end":148545,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"signum","qualname":"::real::Real::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":149026,"byte_end":149042,"line_start":191,"line_end":191,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::real::Real::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and with newer versions of Rust `f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":149519,"byte_end":149535,"line_start":209,"line_end":209,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::real::Real::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":150152,"byte_end":150159,"line_start":229,"line_end":229,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::real::Real::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":150463,"byte_end":150468,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"recip","qualname":"::real::Real::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":150810,"byte_end":150814,"line_start":255,"line_end":255,"column_start":8,"column_end":12},"name":"powi","qualname":"::real::Real::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":151095,"byte_end":151099,"line_start":267,"line_end":267,"column_start":8,"column_end":12},"name":"powf","qualname":"::real::Real::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Raise a number to a real number power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":151691,"byte_end":151695,"line_start":288,"line_end":288,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::real::Real::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":152050,"byte_end":152053,"line_start":304,"line_end":304,"column_start":8,"column_end":11},"name":"exp","qualname":"::real::Real::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":152336,"byte_end":152340,"line_start":318,"line_end":318,"column_start":8,"column_end":12},"name":"exp2","qualname":"::real::Real::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":152829,"byte_end":152831,"line_start":338,"line_end":338,"column_start":8,"column_end":10},"name":"ln","qualname":"::real::Real::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":153483,"byte_end":153486,"line_start":361,"line_end":361,"column_start":8,"column_end":11},"name":"log","qualname":"::real::Real::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":153950,"byte_end":153954,"line_start":379,"line_end":379,"column_start":8,"column_end":12},"name":"log2","qualname":"::real::Real::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":154419,"byte_end":154424,"line_start":398,"line_end":398,"column_start":8,"column_end":13},"name":"log10","qualname":"::real::Real::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":154709,"byte_end":154719,"line_start":411,"line_end":411,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::real::Real::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":155008,"byte_end":155018,"line_start":424,"line_end":424,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::real::Real::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":155249,"byte_end":155252,"line_start":436,"line_end":436,"column_start":8,"column_end":11},"name":"max","qualname":"::real::Real::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":155496,"byte_end":155499,"line_start":448,"line_end":448,"column_start":8,"column_end":11},"name":"min","qualname":"::real::Real::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":156002,"byte_end":156009,"line_start":467,"line_end":467,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::real::Real::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":156322,"byte_end":156326,"line_start":481,"line_end":481,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::real::Real::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":156749,"byte_end":156754,"line_start":497,"line_end":497,"column_start":8,"column_end":13},"name":"hypot","qualname":"::real::Real::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":157087,"byte_end":157090,"line_start":511,"line_end":511,"column_start":8,"column_end":11},"name":"sin","qualname":"::real::Real::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":157412,"byte_end":157415,"line_start":525,"line_end":525,"column_start":8,"column_end":11},"name":"cos","qualname":"::real::Real::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":157730,"byte_end":157733,"line_start":538,"line_end":538,"column_start":8,"column_end":11},"name":"tan","qualname":"::real::Real::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":158390,"byte_end":158394,"line_start":560,"line_end":560,"column_start":8,"column_end":12},"name":"asin","qualname":"::real::Real::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":159047,"byte_end":159051,"line_start":582,"line_end":582,"column_start":8,"column_end":12},"name":"acos","qualname":"::real::Real::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":159420,"byte_end":159424,"line_start":597,"line_end":597,"column_start":8,"column_end":12},"name":"atan","qualname":"::real::Real::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":160310,"byte_end":160315,"line_start":626,"line_end":626,"column_start":8,"column_end":13},"name":"atan2","qualname":"::real::Real::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":160834,"byte_end":160841,"line_start":644,"line_end":644,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::real::Real::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":161214,"byte_end":161220,"line_start":659,"line_end":659,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::real::Real::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":161798,"byte_end":161803,"line_start":680,"line_end":680,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::real::Real::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":162228,"byte_end":162232,"line_start":698,"line_end":698,"column_start":8,"column_end":12},"name":"sinh","qualname":"::real::Real::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":162673,"byte_end":162677,"line_start":716,"line_end":716,"column_start":8,"column_end":12},"name":"cosh","qualname":"::real::Real::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":163138,"byte_end":163142,"line_start":734,"line_end":734,"column_start":8,"column_end":12},"name":"tanh","qualname":"::real::Real::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":163442,"byte_end":163447,"line_start":748,"line_end":748,"column_start":8,"column_end":13},"name":"asinh","qualname":"::real::Real::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":163749,"byte_end":163754,"line_start":762,"line_end":762,"column_start":8,"column_end":13},"name":"acosh","qualname":"::real::Real::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":164090,"byte_end":164095,"line_start":777,"line_end":777,"column_start":8,"column_end":13},"name":"atanh","qualname":"::real::Real::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":900},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":998},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/Users/pmirabel/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.6/src/sign.rs","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1020},{"krate":0,"index":7232},{"krate":0,"index":7244},{"krate":0,"index":7256},{"krate":0,"index":7268},{"krate":0,"index":7280},{"krate":0,"index":7292},{"krate":0,"index":1022},{"krate":0,"index":1034},{"krate":0,"index":7304},{"krate":0,"index":7316},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":7328},{"krate":0,"index":7330},{"krate":0,"index":7332},{"krate":0,"index":7334},{"krate":0,"index":7336},{"krate":0,"index":7338},{"krate":0,"index":1046}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1008},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":166179,"byte_end":166185,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":166438,"byte_end":166441,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":1008},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":166666,"byte_end":166673,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":1008},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":167131,"byte_end":167137,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":1008},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":167254,"byte_end":167265,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":1008},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":167382,"byte_end":167393,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":1008},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1036},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":170587,"byte_end":170590,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":170562,"byte_end":170579,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1038},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":170827,"byte_end":170834,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":170802,"byte_end":170819,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1040},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":171278,"byte_end":171284,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":171253,"byte_end":171270,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":1042},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":171393,"byte_end":171401,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1048},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1982,"byte_end":1985,"line_start":62,"line_end":62,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1052}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1050},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2030,"byte_end":2045,"line_start":63,"line_end":63,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":1048},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2403,"byte_end":2417,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":1048},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1054},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2639,"byte_end":2645,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1058},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3280,"byte_end":3286,"line_start":107,"line_end":107,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1062},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3611,"byte_end":3617,"line_start":118,"line_end":118,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1066},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3956,"byte_end":3968,"line_start":128,"line_end":128,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1070},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4379,"byte_end":4388,"line_start":142,"line_end":142,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1074},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4690,"byte_end":4702,"line_start":153,"line_end":153,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5830,"byte_end":5835,"line_start":193,"line_end":193,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":7412},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5841,"byte_end":5848,"line_start":194,"line_end":194,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":7412},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7412},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5809,"byte_end":5823,"line_start":192,"line_end":192,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":1257},{"krate":0,"index":1259}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7418},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6006,"byte_end":6021,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":1261}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1261},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6032,"byte_end":6036,"line_start":200,"line_end":200,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":7418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1092},"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14087,"byte_end":14092,"line_start":381,"line_end":381,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14070,"byte_end":14079,"line_start":380,"line_end":380,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":19064,"byte_end":19072,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39161,"byte_end":39169,"line_start":568,"line_end":568,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39937,"byte_end":39945,"line_start":601,"line_end":601,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":41853,"byte_end":41861,"line_start":677,"line_end":677,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99793,"byte_end":99801,"line_start":62,"line_end":62,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101501,"byte_end":101509,"line_start":137,"line_end":137,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134483,"byte_end":134491,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134683,"byte_end":134691,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134883,"byte_end":134891,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135083,"byte_end":135091,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135289,"byte_end":135297,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":685,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":164138,"byte_end":164139,"line_start":780,"line_end":780,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":7138},{"krate":0,"index":7140},{"krate":0,"index":7142},{"krate":0,"index":7144},{"krate":0,"index":7146},{"krate":0,"index":7148},{"krate":0,"index":7150},{"krate":0,"index":7152},{"krate":0,"index":7154},{"krate":0,"index":7156},{"krate":0,"index":7158},{"krate":0,"index":7160},{"krate":0,"index":7162},{"krate":0,"index":7164},{"krate":0,"index":7166},{"krate":0,"index":7168},{"krate":0,"index":7170},{"krate":0,"index":7172},{"krate":0,"index":7174},{"krate":0,"index":7176},{"krate":0,"index":7178},{"krate":0,"index":7180},{"krate":0,"index":7182},{"krate":0,"index":7184},{"krate":0,"index":7186},{"krate":0,"index":7188},{"krate":0,"index":7190},{"krate":0,"index":7192},{"krate":0,"index":7194},{"krate":0,"index":7196},{"krate":0,"index":7198},{"krate":0,"index":7200},{"krate":0,"index":7202},{"krate":0,"index":7204},{"krate":0,"index":7206},{"krate":0,"index":7208},{"krate":0,"index":7210},{"krate":0,"index":7212},{"krate":0,"index":7214},{"krate":0,"index":7216},{"krate":0,"index":7218},{"krate":0,"index":7220},{"krate":0,"index":7222},{"krate":0,"index":7224},{"krate":0,"index":7226},{"krate":0,"index":7228},{"krate":0,"index":7230}],"docs":"","sig":null,"attributes":[]},{"id":692,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":168275,"byte_end":168283,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":701,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":171663,"byte_end":171671,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":702,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2882,"byte_end":2883,"line_start":93,"line_end":93,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":703,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3341,"byte_end":3342,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":704,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3711,"byte_end":3712,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":705,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4109,"byte_end":4110,"line_start":133,"line_end":133,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":706,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4434,"byte_end":4435,"line_start":143,"line_end":143,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":707,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4775,"byte_end":4776,"line_start":154,"line_end":154,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5381,"byte_end":5389,"line_start":177,"line_end":177,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6079,"byte_end":6094,"line_start":203,"line_end":203,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1690,"byte_end":1696,"line_start":49,"line_end":49,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":134}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1706,"byte_end":1710,"line_start":50,"line_end":50,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":194}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1720,"byte_end":1725,"line_start":51,"line_end":51,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":346}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1735,"byte_end":1745,"line_start":52,"line_end":52,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":558}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1755,"byte_end":1758,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":598}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1768,"byte_end":1771,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":662}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112186,"byte_end":112193,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":664}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112203,"byte_end":112206,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":720}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112216,"byte_end":112223,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":752}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112233,"byte_end":112243,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":788}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":112253,"byte_end":112261,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":798}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1781,"byte_end":1784,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":858}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1818,"byte_end":1822,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":888}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1832,"byte_end":1836,"line_start":58,"line_end":58,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":998}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":19064,"byte_end":19072,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":174}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":32352,"byte_end":32357,"line_start":364,"line_end":364,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":288}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39161,"byte_end":39169,"line_start":568,"line_end":568,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":238}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":39937,"byte_end":39945,"line_start":601,"line_end":601,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":288}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40780,"byte_end":40785,"line_start":640,"line_end":640,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":330}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":40788,"byte_end":40799,"line_start":640,"line_end":640,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":238},"to":{"krate":0,"index":330}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":41853,"byte_end":41861,"line_start":677,"line_end":677,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":330}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":43093,"byte_end":43097,"line_start":718,"line_end":718,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":340}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44862,"byte_end":44865,"line_start":13,"line_end":13,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":366}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44868,"byte_end":44875,"line_start":13,"line_end":13,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":330},"to":{"krate":0,"index":366}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44878,"byte_end":44881,"line_start":13,"line_end":13,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":366}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44899,"byte_end":44909,"line_start":13,"line_end":13,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2382},"to":{"krate":0,"index":366}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":44912,"byte_end":44916,"line_start":13,"line_end":13,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":366}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68221,"byte_end":68224,"line_start":898,"line_end":898,"column_start":18,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68227,"byte_end":68231,"line_start":898,"line_end":898,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68234,"byte_end":68241,"line_start":898,"line_end":898,"column_start":31,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":330},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68244,"byte_end":68254,"line_start":898,"line_end":898,"column_start":41,"column_end":51},"kind":"SuperTrait","from":{"krate":1,"index":2382},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68257,"byte_end":68260,"line_start":898,"line_end":898,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":98509,"byte_end":98514,"line_start":5,"line_end":5,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":568}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":98517,"byte_end":98520,"line_start":5,"line_end":5,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":568}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":99793,"byte_end":99801,"line_start":62,"line_end":62,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[284]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":568}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100054,"byte_end":100059,"line_start":75,"line_end":75,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":582}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":100062,"byte_end":100065,"line_start":75,"line_end":75,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1734},"to":{"krate":0,"index":582}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":101501,"byte_end":101509,"line_start":137,"line_end":137,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[299]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":582}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102809,"byte_end":102814,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102821,"byte_end":102825,"line_start":10,"line_end":10,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102832,"byte_end":102835,"line_start":11,"line_end":11,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102842,"byte_end":102849,"line_start":12,"line_end":12,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":330},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102856,"byte_end":102863,"line_start":13,"line_end":13,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102870,"byte_end":102880,"line_start":14,"line_end":14,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2382},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102887,"byte_end":102890,"line_start":15,"line_end":15,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2364},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102897,"byte_end":102899,"line_start":16,"line_end":16,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2334},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102906,"byte_end":102909,"line_start":17,"line_end":17,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1806},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102931,"byte_end":102937,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1814},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102959,"byte_end":102964,"line_start":19,"line_end":19,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1822},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":102986,"byte_end":102992,"line_start":20,"line_end":20,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1830},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103014,"byte_end":103017,"line_start":21,"line_end":21,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1838},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103046,"byte_end":103049,"line_start":22,"line_end":22,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1848},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103078,"byte_end":103088,"line_start":23,"line_end":23,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":682},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103110,"byte_end":103120,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":688},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103142,"byte_end":103152,"line_start":25,"line_end":25,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":692},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103174,"byte_end":103184,"line_start":26,"line_end":26,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":696},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,105,110,116,46,114,115],"byte_start":103206,"byte_end":103216,"line_start":27,"line_end":27,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":790},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112425,"byte_end":112430,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":112433,"byte_end":112436,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113566,"byte_end":113571,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":688}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":113574,"byte_end":113577,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1726},"to":{"krate":0,"index":688}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114469,"byte_end":114474,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":692}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":114477,"byte_end":114480,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1734},"to":{"krate":0,"index":692}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115437,"byte_end":115442,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":696}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":115445,"byte_end":115448,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1742},"to":{"krate":0,"index":696}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":116424,"byte_end":116429,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":116432,"byte_end":116435,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1752},"to":{"krate":0,"index":700}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":118203,"byte_end":118208,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":706}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":119623,"byte_end":119628,"line_start":199,"line_end":199,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":710}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":119631,"byte_end":119634,"line_start":199,"line_end":199,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1838},"to":{"krate":0,"index":710}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121202,"byte_end":121207,"line_start":244,"line_end":244,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":716}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":121210,"byte_end":121213,"line_start":244,"line_end":244,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1848},"to":{"krate":0,"index":716}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128694,"byte_end":128699,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":816}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":128702,"byte_end":128705,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":816}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129588,"byte_end":129593,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":129596,"byte_end":129599,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1726},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130488,"byte_end":130493,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":130496,"byte_end":130499,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1734},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":131645,"byte_end":131650,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":131653,"byte_end":131656,"line_start":104,"line_end":104,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1838},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133051,"byte_end":133056,"line_start":139,"line_end":139,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":834}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":133059,"byte_end":133062,"line_start":139,"line_end":139,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1848},"to":{"krate":0,"index":834}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134483,"byte_end":134491,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[510]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":816}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134683,"byte_end":134691,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[511]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":134883,"byte_end":134891,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[512]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":824}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135083,"byte_end":135091,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[513]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":830}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":135289,"byte_end":135297,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[514]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":834}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144512,"byte_end":144515,"line_start":15,"line_end":15,"column_start":17,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144518,"byte_end":144522,"line_start":15,"line_end":15,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144525,"byte_end":144532,"line_start":15,"line_end":15,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":330},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144535,"byte_end":144545,"line_start":15,"line_end":15,"column_start":40,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2382},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":144548,"byte_end":144551,"line_start":15,"line_end":15,"column_start":53,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":164138,"byte_end":164139,"line_start":780,"line_end":780,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[685]},"from":{"krate":0,"index":73},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":166187,"byte_end":166192,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1656},"to":{"krate":0,"index":1008}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":166195,"byte_end":166198,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":1008}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":166201,"byte_end":166204,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1762},"to":{"krate":0,"index":1008}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":168275,"byte_end":168283,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[692]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":1008}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":171403,"byte_end":171406,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":1042}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":171663,"byte_end":171671,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[701]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":1042}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1987,"byte_end":1996,"line_start":62,"line_end":62,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2328},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1999,"byte_end":2003,"line_start":62,"line_end":62,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":568},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2006,"byte_end":2009,"line_start":62,"line_end":62,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":582},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2012,"byte_end":2018,"line_start":62,"line_end":62,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1054},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2678,"byte_end":2681,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":1054}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2710,"byte_end":2713,"line_start":86,"line_end":86,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1726},"to":{"krate":0,"index":1054}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2742,"byte_end":2745,"line_start":87,"line_end":87,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1734},"to":{"krate":0,"index":1054}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2774,"byte_end":2777,"line_start":88,"line_end":88,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1742},"to":{"krate":0,"index":1054}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2806,"byte_end":2809,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1752},"to":{"krate":0,"index":1054}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2882,"byte_end":2883,"line_start":93,"line_end":93,"column_start":46,"column_end":47},"kind":{"variant":"Impl","fields":[702]},"from":{"krate":0,"index":89},"to":{"krate":0,"index":1054}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3288,"byte_end":3291,"line_start":107,"line_end":107,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":1058}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3302,"byte_end":3308,"line_start":107,"line_end":107,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":1054},"to":{"krate":0,"index":1058}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3341,"byte_end":3342,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"kind":{"variant":"Impl","fields":[703]},"from":{"krate":0,"index":97},"to":{"krate":0,"index":1058}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3625,"byte_end":3631,"line_start":118,"line_end":118,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1054},"to":{"krate":0,"index":1062}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3654,"byte_end":3660,"line_start":118,"line_end":118,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":1054},"to":{"krate":0,"index":1062}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3711,"byte_end":3712,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"kind":{"variant":"Impl","fields":[704]},"from":{"krate":0,"index":105},"to":{"krate":0,"index":1062}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3986,"byte_end":3995,"line_start":129,"line_end":129,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":1774},"to":{"krate":0,"index":1066}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4003,"byte_end":4012,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1780},"to":{"krate":0,"index":1066}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4020,"byte_end":4029,"line_start":129,"line_end":129,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1786},"to":{"krate":0,"index":1066}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4037,"byte_end":4046,"line_start":129,"line_end":129,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":1792},"to":{"krate":0,"index":1066}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4054,"byte_end":4063,"line_start":129,"line_end":129,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":1798},"to":{"krate":0,"index":1066}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4109,"byte_end":4110,"line_start":133,"line_end":133,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[705]},"from":{"krate":0,"index":113},"to":{"krate":0,"index":1066}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4390,"byte_end":4393,"line_start":142,"line_end":142,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1048},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4396,"byte_end":4408,"line_start":142,"line_end":142,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":1066},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4434,"byte_end":4435,"line_start":143,"line_end":143,"column_start":23,"column_end":24},"kind":{"variant":"Impl","fields":[706]},"from":{"krate":0,"index":117},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4704,"byte_end":4713,"line_start":153,"line_end":153,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1070},"to":{"krate":0,"index":1074}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4724,"byte_end":4736,"line_start":153,"line_end":153,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":1066},"to":{"krate":0,"index":1074}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4775,"byte_end":4776,"line_start":154,"line_end":154,"column_start":26,"column_end":27},"kind":{"variant":"Impl","fields":[707]},"from":{"krate":0,"index":121},"to":{"krate":0,"index":1074}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5381,"byte_end":5389,"line_start":177,"line_end":177,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[720]},"from":{"krate":1,"index":12346},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,85,115,101,114,115,47,112,109,105,114,97,98,101,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6079,"byte_end":6094,"line_start":203,"line_end":203,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[721]},"from":{"krate":0,"index":7418},"to":{"krate":1,"index":7970}}]}